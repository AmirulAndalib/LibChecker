{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_ident' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 6,
        "length": 7,
        "offset": 31,
        "surroundingCode": "class ELF32EhdrParser {\n\n  val e_ident = ByteArray(UNSIGNED_CHAR * EI_NIDENT)\n  val e_type = ByteArray(ELF32_HALF)\n  val e_machine = ByteArray(ELF32_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "9c94144c8b059efee381d5704d516a89dc2d547e542caa1ffc1aae12caf17e29"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_shstrndx' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 19,
        "length": 10,
        "offset": 86,
        "surroundingCode": "  val e_shentsize = ByteArray(ELF32_HALF)\n  val e_shnum = ByteArray(ELF32_HALF)\n  val e_shstrndx = ByteArray(ELF32_HALF)\n\n  private constructor()"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "626b8bf5faff52f114dd5b78db5d982437e17231ad341da5730ed9c781ade551"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_machine' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 8,
        "length": 9,
        "offset": 96,
        "surroundingCode": "  val e_ident = ByteArray(UNSIGNED_CHAR * EI_NIDENT)\n  val e_type = ByteArray(ELF32_HALF)\n  val e_machine = ByteArray(ELF32_HALF)\n  val e_version = ByteArray(ELF32_WORD)\n  val e_entry = ByteArray(ELF32_ADDR)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "64a7f591cccf171a8695b66e06ae23f51199c433ed9df790729b9403ce989487"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_ehsize' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 14,
        "length": 8,
        "offset": 81,
        "surroundingCode": "  val e_shoff = ByteArray(ELF32_OFF)\n  val e_flags = ByteArray(ELF32_WORD)\n  val e_ehsize = ByteArray(ELF32_HALF)\n  val e_phentsize = ByteArray(ELF32_HALF)\n  val e_phnum = ByteArray(ELF32_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "666501378075baad30aa219ec3bd0e84986028ac9b8149d84b8f6d05ca4d4634"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_phoff' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 11,
        "length": 7,
        "offset": 84,
        "surroundingCode": "  val e_version = ByteArray(ELF32_WORD)\n  val e_entry = ByteArray(ELF32_ADDR)\n  val e_phoff = ByteArray(ELF32_OFF)\n  val e_shoff = ByteArray(ELF32_OFF)\n  val e_flags = ByteArray(ELF32_WORD)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "808ddec02205af03078e344bfe5a57d96de3279aa0c87a78ae1c35489408ae7f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_version' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 9,
        "length": 9,
        "offset": 83,
        "surroundingCode": "  val e_type = ByteArray(ELF32_HALF)\n  val e_machine = ByteArray(ELF32_HALF)\n  val e_version = ByteArray(ELF32_WORD)\n  val e_entry = ByteArray(ELF32_ADDR)\n  val e_phoff = ByteArray(ELF32_OFF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "6fe36a26851ef935a53c45e4d897fc1c80aea4d034ca53ee62e625c5f0b80177"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_phentsize' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 15,
        "length": 11,
        "offset": 83,
        "surroundingCode": "  val e_flags = ByteArray(ELF32_WORD)\n  val e_ehsize = ByteArray(ELF32_HALF)\n  val e_phentsize = ByteArray(ELF32_HALF)\n  val e_phnum = ByteArray(ELF32_HALF)\n  val e_shentsize = ByteArray(ELF32_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "fea0a4496fb52ed62caa8bf585f9691c5922eab9d4ae313487fad6a32d166e28"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_shoff' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 12,
        "length": 7,
        "offset": 81,
        "surroundingCode": "  val e_entry = ByteArray(ELF32_ADDR)\n  val e_phoff = ByteArray(ELF32_OFF)\n  val e_shoff = ByteArray(ELF32_OFF)\n  val e_flags = ByteArray(ELF32_WORD)\n  val e_ehsize = ByteArray(ELF32_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "2a329fad0041e7111b4b5a39287511b15debf2881d699b34592d1dbd14834420"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_entry' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 10,
        "length": 7,
        "offset": 86,
        "surroundingCode": "  val e_machine = ByteArray(ELF32_HALF)\n  val e_version = ByteArray(ELF32_WORD)\n  val e_entry = ByteArray(ELF32_ADDR)\n  val e_phoff = ByteArray(ELF32_OFF)\n  val e_shoff = ByteArray(ELF32_OFF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "bf788f5842334e80a65204743e878e68214fc7574db5653f81e62729b5d8c6cf"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_shnum' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 18,
        "length": 7,
        "offset": 86,
        "surroundingCode": "  val e_phnum = ByteArray(ELF32_HALF)\n  val e_shentsize = ByteArray(ELF32_HALF)\n  val e_shnum = ByteArray(ELF32_HALF)\n  val e_shstrndx = ByteArray(ELF32_HALF)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "592aaf49aeb927bcac630e08d78220add354f22f48929cb88a6ec86ee1637b36"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_flags' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 13,
        "length": 7,
        "offset": 80,
        "surroundingCode": "  val e_phoff = ByteArray(ELF32_OFF)\n  val e_shoff = ByteArray(ELF32_OFF)\n  val e_flags = ByteArray(ELF32_WORD)\n  val e_ehsize = ByteArray(ELF32_HALF)\n  val e_phentsize = ByteArray(ELF32_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "1a19f7bbb177f22f1486f26c182df54de0ed0b1909ccc964ae7fc77b8582ce26"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_phnum' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 16,
        "length": 7,
        "offset": 87,
        "surroundingCode": "  val e_ehsize = ByteArray(ELF32_HALF)\n  val e_phentsize = ByteArray(ELF32_HALF)\n  val e_phnum = ByteArray(ELF32_HALF)\n  val e_shentsize = ByteArray(ELF32_HALF)\n  val e_shnum = ByteArray(ELF32_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "d660ee1c6396b7d0cb8d312f6df0b501128f74492656637bd491584db1a3c829"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_shentsize' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 17,
        "length": 11,
        "offset": 86,
        "surroundingCode": "  val e_phentsize = ByteArray(ELF32_HALF)\n  val e_phnum = ByteArray(ELF32_HALF)\n  val e_shentsize = ByteArray(ELF32_HALF)\n  val e_shnum = ByteArray(ELF32_HALF)\n  val e_shstrndx = ByteArray(ELF32_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "3778335f88e4c5a1bba88d9ece2b1a00a38dc99c90b8e808397956beef81a9e5"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_type' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 7,
        "length": 6,
        "offset": 60,
        "surroundingCode": "\n  val e_ident = ByteArray(UNSIGNED_CHAR * EI_NIDENT)\n  val e_type = ByteArray(ELF32_HALF)\n  val e_machine = ByteArray(ELF32_HALF)\n  val e_version = ByteArray(ELF32_WORD)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "67116a3a98385f393da584604f7349f64d639fb54f6a60cbf498872e8f487584"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_shentsize' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 16,
        "length": 11,
        "offset": 86,
        "surroundingCode": "  val e_phentsize = ByteArray(ELF64_HALF)\n  val e_phnum = ByteArray(ELF64_HALF)\n  val e_shentsize = ByteArray(ELF64_HALF)\n  val e_shnum = ByteArray(ELF64_HALF)\n  val e_shstrndx = ByteArray(ELF64_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "5650fd6d3dd90071f6c01f3cfacf5a9edfd667bf85fb1f3f94cbd6671d1c1634"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_entry' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 9,
        "length": 7,
        "offset": 86,
        "surroundingCode": "  val e_machine = ByteArray(ELF64_HALF)\n  val e_version = ByteArray(ELF64_WORD)\n  val e_entry = ByteArray(ELF64_ADDR)\n  val e_phoff = ByteArray(ELF64_OFF)\n  val e_shoff = ByteArray(ELF64_OFF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "e7f40e58a729079b4458cbb8092a8489d62f48d93fca2f5e17492fece29345db"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_phnum' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 15,
        "length": 7,
        "offset": 87,
        "surroundingCode": "  val e_ehsize = ByteArray(ELF64_HALF)\n  val e_phentsize = ByteArray(ELF64_HALF)\n  val e_phnum = ByteArray(ELF64_HALF)\n  val e_shentsize = ByteArray(ELF64_HALF)\n  val e_shnum = ByteArray(ELF64_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "9c943e0c5d8c3f9965de858c49e964c5cce229fd4cc85ec9bfa48e9cc414c798"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_flags' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 12,
        "length": 7,
        "offset": 80,
        "surroundingCode": "  val e_phoff = ByteArray(ELF64_OFF)\n  val e_shoff = ByteArray(ELF64_OFF)\n  val e_flags = ByteArray(ELF64_WORD)\n  val e_ehsize = ByteArray(ELF64_HALF)\n  val e_phentsize = ByteArray(ELF64_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "310a4aa7925eefb947927523d5b14498af22fc6070eaa79f814a0d2babb3041d"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_shnum' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 17,
        "length": 7,
        "offset": 86,
        "surroundingCode": "  val e_phnum = ByteArray(ELF64_HALF)\n  val e_shentsize = ByteArray(ELF64_HALF)\n  val e_shnum = ByteArray(ELF64_HALF)\n  val e_shstrndx = ByteArray(ELF64_HALF)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "4c40f0e539b52770afc81003a03f2a0c6c3480efad91cb149839ede5279a7f26"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_phoff' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 10,
        "length": 7,
        "offset": 84,
        "surroundingCode": "  val e_version = ByteArray(ELF64_WORD)\n  val e_entry = ByteArray(ELF64_ADDR)\n  val e_phoff = ByteArray(ELF64_OFF)\n  val e_shoff = ByteArray(ELF64_OFF)\n  val e_flags = ByteArray(ELF64_WORD)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "a86a867754de0d15756eccedf2002fb4a31ba2458525f40cdf9cc229206caf92"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_machine' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 7,
        "length": 9,
        "offset": 96,
        "surroundingCode": "  val e_ident = ByteArray(UNSIGNED_CHAR * EI_NIDENT)\n  val e_type = ByteArray(ELF64_HALF)\n  val e_machine = ByteArray(ELF64_HALF)\n  val e_version = ByteArray(ELF64_WORD)\n  val e_entry = ByteArray(ELF64_ADDR)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "ca6c8b0571ead38d5301290468c32fbb278ebdb050445d59f56e8a4c4a6793f2"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_version' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 8,
        "length": 9,
        "offset": 83,
        "surroundingCode": "  val e_type = ByteArray(ELF64_HALF)\n  val e_machine = ByteArray(ELF64_HALF)\n  val e_version = ByteArray(ELF64_WORD)\n  val e_entry = ByteArray(ELF64_ADDR)\n  val e_phoff = ByteArray(ELF64_OFF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "58b7eb88742b19e7025329aab46b63b2202b5ac190761d28fb5ad3a13516bed6"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_shstrndx' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 18,
        "length": 10,
        "offset": 86,
        "surroundingCode": "  val e_shentsize = ByteArray(ELF64_HALF)\n  val e_shnum = ByteArray(ELF64_HALF)\n  val e_shstrndx = ByteArray(ELF64_HALF)\n\n  private constructor()"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "58d64a6920b55af28128307a76c6eac189168e315e1c380a7a838f75f696c6ed"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_ident' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 7,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 5,
        "length": 7,
        "offset": 31,
        "surroundingCode": "\nclass ELF64EhdrParser {\n  val e_ident = ByteArray(UNSIGNED_CHAR * EI_NIDENT)\n  val e_type = ByteArray(ELF64_HALF)\n  val e_machine = ByteArray(ELF64_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "6e9abca1d6fce5e5c815fd9aad39f93e131d029d03d965a959a7726bfff0271d"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_phentsize' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 14,
        "length": 11,
        "offset": 83,
        "surroundingCode": "  val e_flags = ByteArray(ELF64_WORD)\n  val e_ehsize = ByteArray(ELF64_HALF)\n  val e_phentsize = ByteArray(ELF64_HALF)\n  val e_phnum = ByteArray(ELF64_HALF)\n  val e_shentsize = ByteArray(ELF64_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "ea2448148043df0e8bfef188e33cbc129996c23615da2821ba033424e4d67c75"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_shoff' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 11,
        "length": 7,
        "offset": 81,
        "surroundingCode": "  val e_entry = ByteArray(ELF64_ADDR)\n  val e_phoff = ByteArray(ELF64_OFF)\n  val e_shoff = ByteArray(ELF64_OFF)\n  val e_flags = ByteArray(ELF64_WORD)\n  val e_ehsize = ByteArray(ELF64_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "171cde1b9faa26d9ce8845e3e28f247bbd94268925d831f01e211339ff17c910"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_type' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 6,
        "length": 6,
        "offset": 83,
        "surroundingCode": "class ELF64EhdrParser {\n  val e_ident = ByteArray(UNSIGNED_CHAR * EI_NIDENT)\n  val e_type = ByteArray(ELF64_HALF)\n  val e_machine = ByteArray(ELF64_HALF)\n  val e_version = ByteArray(ELF64_WORD)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "7ea2920318e0c27229524d798135993de6328ee100e3c71c2d83cb2fb26bda7c"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name 'e_ehsize' should not contain underscores",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 13,
        "length": 8,
        "offset": 81,
        "surroundingCode": "  val e_shoff = ByteArray(ELF64_OFF)\n  val e_flags = ByteArray(ELF64_WORD)\n  val e_ehsize = ByteArray(ELF64_HALF)\n  val e_phentsize = ByteArray(ELF64_HALF)\n  val e_phnum = ByteArray(ELF64_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "PropertyName"
  },
  "hash": "b4619956ea7b7dbaa93ed50b075734d45dda7e6fb5063d9c2ba1b30a5372a31c"
},{
  "tool": "Code Inspection",
  "category": "Class",
  "type": "Class name same as ancestor name",
  "severity": "High",
  "comment": "Class name 'ViewHolder' is the same as one of its superclass' names",
  "detailsInfo": "Reports classes that have the same name as one of their superclasses, while their fully qualified names remain different. Such class names may be very confusing.\n\n**Example:**\n\n\n      package util;\n      abstract class Iterable<T> implements java.lang.Iterable<T> {}\n\nA quick-fix that renames such classes is available only in the editor.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/ui/about/ContributorViewBinder.java",
      "language": "JAVA",
      "line": 51,
      "offset": 23,
      "length": 10,
      "code": {
        "startLine": 49,
        "length": 10,
        "offset": 27,
        "surroundingCode": "  }\n\n  public static class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n\n    public ImageView avatar;"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "ClassNameSameAsAncestorName"
  },
  "hash": "ee33a12f684f71a5872479702e382126518e2642691a987d18306110d3b0cd4e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Remove unnecessary parentheses from function call with lambda",
  "severity": "Info",
  "comment": "Remove unnecessary parentheses from function call with lambda",
  "detailsInfo": "Reports redundant empty parentheses of function calls where the only parameter is a lambda that's outside the parentheses.\n\nUse the 'Remove unnecessary parentheses from function call with lambda' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      fun foo() {\n          listOf(1).forEach() {  }\n      }\n\nAfter the quick-fix is applied:\n\n\n      fun foo() {\n          listOf(1).forEach {  }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "hidden-api/build.gradle.kts",
      "language": "kotlin",
      "line": 6,
      "offset": 19,
      "length": 2,
      "code": {
        "startLine": 4,
        "length": 2,
        "offset": 21,
        "surroundingCode": "}\n\nsetupLibraryModule() {\n  defaultConfig {\n    namespace = \"com.absinthe.libchecker.hidden_api\""
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.hidden-api",
    "inspectionName": "RemoveEmptyParenthesesFromLambdaCall"
  },
  "hash": "76ea04b8e017cc2d1a313b4d4dde2cfb0895c873ee60e5f14104cc929b64b3c5"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to 'printStackTrace()' should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/manifest/ManifestReader.java",
      "language": "JAVA",
      "line": 53,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 51,
        "length": 15,
        "offset": 68,
        "surroundingCode": "      return bos.toByteArray();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return null;"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "fc49b38dfe19e130fd0ba1f390b5f770fe33a432e8ece5fdb63c5de94eff97d9"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to 'printStackTrace()' should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/ui/about/ContributorViewBinder.java",
      "language": "JAVA",
      "line": 80,
      "offset": 13,
      "length": 15,
      "code": {
        "startLine": 78,
        "length": 15,
        "offset": 108,
        "surroundingCode": "          v.getContext().startActivity(intent);\n        } catch (ActivityNotFoundException e) {\n          e.printStackTrace();\n        }\n      }"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "1b47509d1a89dde06e32f86890d16e5a4e6d9f92c06ca536df4887ada8999b7d"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to 'printStackTrace()' should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/manifest/StaticLibraryReader.java",
      "language": "JAVA",
      "line": 47,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 45,
        "length": 15,
        "offset": 68,
        "surroundingCode": "      return bos.toByteArray();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return null;"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "eddaf80216216e0dcefa9758feb850d2c2640f3543e8f849fb26c430c1844d16"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/StringExtensions.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 10,
        "length": 6,
        "offset": 7,
        "surroundingCode": "}\n\nfun String.test() {\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "e8e7c3705a4675a0faa8ff40e1bb3d8bf8e230d36cac8afaa0d18d91ca5944fd"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'expand' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/view/detail/ProcessIndicatorView.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 62,
        "length": 6,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun expand() {\n    isExpand = true\n    animateToggle(animationDuration)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6ed2c8bcce094df75f6410d6ca03567997de1a0dda0302cd71b54e22383f9757"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'animationDuration' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/view/detail/ProcessIndicatorView.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 16,
        "length": 17,
        "offset": 54,
        "surroundingCode": "  var isExpand: Boolean = false\n    private set\n  var animationDuration = 350L\n\n  private val libStringAdapter = LibStringAdapter(\"\", ACTIVITY)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2d54681887075226939299f8f9771e554b09dfa06d4acbd432664bb7e0d6f54c"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'isExpand' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/view/detail/ProcessIndicatorView.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 14,
        "length": 8,
        "offset": 46,
        "surroundingCode": "  FrameLayout(context, attributeSet) {\n\n  var isExpand: Boolean = false\n    private set\n  var animationDuration = 350L"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "0e9e1b26e8149784bb56312c99c47277bfe358efa881e587662f37fbbf6ddcf4"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'collapse' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/view/detail/ProcessIndicatorView.kt",
      "language": "kotlin",
      "line": 59,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 57,
        "length": 8,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun collapse() {\n    isExpand = false\n    animateToggle(animationDuration)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "69790851af5408ffde7471b0a840cf5c032e19efb5a6670ca194498d4cafbbea"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_ident' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 6,
        "length": 7,
        "offset": 31,
        "surroundingCode": "class ELF32EhdrParser {\n\n  val e_ident = ByteArray(UNSIGNED_CHAR * EI_NIDENT)\n  val e_type = ByteArray(ELF32_HALF)\n  val e_machine = ByteArray(ELF32_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "28cd4be30c73a95447e12c1a6a119e95b84867989ae81c1ac0b9088740178393"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_shstrndx' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 19,
        "length": 10,
        "offset": 86,
        "surroundingCode": "  val e_shentsize = ByteArray(ELF32_HALF)\n  val e_shnum = ByteArray(ELF32_HALF)\n  val e_shstrndx = ByteArray(ELF32_HALF)\n\n  private constructor()"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b735658726eca5c2793de236a3ae30d9a54ebc68d3852332d4cc926070515e23"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isElf' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 27,
        "length": 5,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun isElf(): Boolean {\n    return e_ident[0].toInt() == 0x7F &&\n      e_ident[1].toInt().toChar() == 'E' &&"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "f0cc6708f92a4b0fc7d94b9fcebe734238abb55e507361e0ef168126fda7132e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_machine' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 8,
        "length": 9,
        "offset": 96,
        "surroundingCode": "  val e_ident = ByteArray(UNSIGNED_CHAR * EI_NIDENT)\n  val e_type = ByteArray(ELF32_HALF)\n  val e_machine = ByteArray(ELF32_HALF)\n  val e_version = ByteArray(ELF32_WORD)\n  val e_entry = ByteArray(ELF32_ADDR)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "d8cf97b67354df0d8507cdb6c73b468370e460e5e2cc96507174617da355071a"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_ehsize' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 14,
        "length": 8,
        "offset": 81,
        "surroundingCode": "  val e_shoff = ByteArray(ELF32_OFF)\n  val e_flags = ByteArray(ELF32_WORD)\n  val e_ehsize = ByteArray(ELF32_HALF)\n  val e_phentsize = ByteArray(ELF32_HALF)\n  val e_phnum = ByteArray(ELF32_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "199b99b93ee7698608a58d3351dc07954ea25130fdb1a92af7663c97ce97c911"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_phoff' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 11,
        "length": 7,
        "offset": 84,
        "surroundingCode": "  val e_version = ByteArray(ELF32_WORD)\n  val e_entry = ByteArray(ELF32_ADDR)\n  val e_phoff = ByteArray(ELF32_OFF)\n  val e_shoff = ByteArray(ELF32_OFF)\n  val e_flags = ByteArray(ELF32_WORD)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "bd17c586d3fa56c234fd0de3679e1799d5638bb607f11b16b426d0beba1853cd"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_version' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 9,
        "length": 9,
        "offset": 83,
        "surroundingCode": "  val e_type = ByteArray(ELF32_HALF)\n  val e_machine = ByteArray(ELF32_HALF)\n  val e_version = ByteArray(ELF32_WORD)\n  val e_entry = ByteArray(ELF32_ADDR)\n  val e_phoff = ByteArray(ELF32_OFF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "069611eeabfe60bbf21b15647973043fdda29a19d97b302a87710478fed76ee1"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_phentsize' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 15,
        "length": 11,
        "offset": 83,
        "surroundingCode": "  val e_flags = ByteArray(ELF32_WORD)\n  val e_ehsize = ByteArray(ELF32_HALF)\n  val e_phentsize = ByteArray(ELF32_HALF)\n  val e_phnum = ByteArray(ELF32_HALF)\n  val e_shentsize = ByteArray(ELF32_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "1e8f295dee6d642d32f366b29271c96f3adb9103eadf6caac4e95acbfec126e8"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_shoff' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 12,
        "length": 7,
        "offset": 81,
        "surroundingCode": "  val e_entry = ByteArray(ELF32_ADDR)\n  val e_phoff = ByteArray(ELF32_OFF)\n  val e_shoff = ByteArray(ELF32_OFF)\n  val e_flags = ByteArray(ELF32_WORD)\n  val e_ehsize = ByteArray(ELF32_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "fcbdc1a3582eccd9edd26db0203c2761d78a04ab4bde422cdd55a206ffc83322"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_entry' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 10,
        "length": 7,
        "offset": 86,
        "surroundingCode": "  val e_machine = ByteArray(ELF32_HALF)\n  val e_version = ByteArray(ELF32_WORD)\n  val e_entry = ByteArray(ELF32_ADDR)\n  val e_phoff = ByteArray(ELF32_OFF)\n  val e_shoff = ByteArray(ELF32_OFF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "1590d6b87f01fd2590a0692d2e6cb19bf48fe944154e84bf2129035fb3ce8f31"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_shnum' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 18,
        "length": 7,
        "offset": 86,
        "surroundingCode": "  val e_phnum = ByteArray(ELF32_HALF)\n  val e_shentsize = ByteArray(ELF32_HALF)\n  val e_shnum = ByteArray(ELF32_HALF)\n  val e_shstrndx = ByteArray(ELF32_HALF)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "d84189e223bb22da4edf115b66c20a5e714165abc8e350a4013339311d1b2350"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_flags' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 13,
        "length": 7,
        "offset": 80,
        "surroundingCode": "  val e_phoff = ByteArray(ELF32_OFF)\n  val e_shoff = ByteArray(ELF32_OFF)\n  val e_flags = ByteArray(ELF32_WORD)\n  val e_ehsize = ByteArray(ELF32_HALF)\n  val e_phentsize = ByteArray(ELF32_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "22aa7d887e86251c1dff4ff6f5d5fbe53e5a6e594c3216daded0710a04001c69"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_phnum' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 16,
        "length": 7,
        "offset": 87,
        "surroundingCode": "  val e_ehsize = ByteArray(ELF32_HALF)\n  val e_phentsize = ByteArray(ELF32_HALF)\n  val e_phnum = ByteArray(ELF32_HALF)\n  val e_shentsize = ByteArray(ELF32_HALF)\n  val e_shnum = ByteArray(ELF32_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "35a1762076666ad31a798ee6ad88df8bea4b37df8b28215842a7b10f9397b6f6"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_shentsize' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 17,
        "length": 11,
        "offset": 86,
        "surroundingCode": "  val e_phentsize = ByteArray(ELF32_HALF)\n  val e_phnum = ByteArray(ELF32_HALF)\n  val e_shentsize = ByteArray(ELF32_HALF)\n  val e_shnum = ByteArray(ELF32_HALF)\n  val e_shstrndx = ByteArray(ELF32_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "5922ef143921086219603a9998138fe58b3b4d2ac3f8f85e6e3ea42490218b22"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_type' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 7,
        "length": 6,
        "offset": 60,
        "surroundingCode": "\n  val e_ident = ByteArray(UNSIGNED_CHAR * EI_NIDENT)\n  val e_type = ByteArray(ELF32_HALF)\n  val e_machine = ByteArray(ELF32_HALF)\n  val e_version = ByteArray(ELF32_WORD)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "135ae52b6bcad0c96afe42b0c8748dac6317527eabf03dc6378adbfb23dccb70"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isComponentEnabled' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/PackageUtils.kt",
      "language": "kotlin",
      "line": 620,
      "offset": 7,
      "length": 18,
      "code": {
        "startLine": 618,
        "length": 18,
        "offset": 47,
        "surroundingCode": "   * @return true if it is enabled\n   */\n  fun isComponentEnabled(info: ComponentInfo): Boolean {\n    val state = runCatching {\n      SystemServices.packageManager.getComponentEnabledSetting("
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e693a07fe346eca390c19f3ed38fcf5282e98fd460e2ae366b52b7d2bac1dab0"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isUseJetpackCompose' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/PackageUtils.kt",
      "language": "kotlin",
      "line": 1351,
      "offset": 19,
      "length": 19,
      "code": {
        "startLine": 1349,
        "length": 19,
        "offset": 23,
        "surroundingCode": "  }\n\n  fun PackageInfo.isUseJetpackCompose(foundList: List<String>? = null): Boolean {\n    val usedInMetaInf = runCatching {\n      val file = File(applicationInfo.sourceDir)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ebdd9e1761cad5522a426684714034e3cc575a2d5226e16c00e583a205e7bf73"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isRxAndroidUsed' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/PackageUtils.kt",
      "language": "kotlin",
      "line": 1547,
      "offset": 19,
      "length": 15,
      "code": {
        "startLine": 1545,
        "length": 15,
        "offset": 73,
        "surroundingCode": "   * @return true if it uses RxAndroid framework\n   */\n  fun PackageInfo.isRxAndroidUsed(foundList: List<String>? = null): Boolean {\n    if (foundList.isNullOrEmpty().not()) {\n      return foundList?.contains(\"io.reactivex.rxjava3.android.*\".toClassDefType()) == true ||"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "dd65799baf3a52f4800d3fb5877c1fc84af42351eeed0b28f1ea85536bae843b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'elfTypeToString' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/PackageUtils.kt",
      "language": "kotlin",
      "line": 961,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 959,
        "length": 15,
        "offset": 44,
        "surroundingCode": "   * @return String of ELF type\n   */\n  fun elfTypeToString(@ElfType type: Int): String {\n    return when (type) {\n      ET_NOT_ELF -> \"Not ELF\""
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "bbd1392a8dea811fbb76615aa4009ef2bf9ab4b38277524661a67d2a5e1f5187"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isPlayAppSigning' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/PackageUtils.kt",
      "language": "kotlin",
      "line": 1312,
      "offset": 19,
      "length": 16,
      "code": {
        "startLine": 1310,
        "length": 16,
        "offset": 23,
        "surroundingCode": "  }\n\n  fun PackageInfo.isPlayAppSigning(): Boolean {\n    return applicationInfo.metaData?.getString(\"com.android.stamp.type\") == \"STAMP_TYPE_DISTRIBUTION_APK\" &&\n      applicationInfo.metaData?.getString(\"com.android.stamp.source\") == \"https://play.google.com/store\""
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ca3478df53824f4c32281e9266558e9093be5f1991bb3518e3d0be25634dff97"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isXposedModule' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/PackageUtils.kt",
      "language": "kotlin",
      "line": 1307,
      "offset": 19,
      "length": 14,
      "code": {
        "startLine": 1305,
        "length": 14,
        "offset": 23,
        "surroundingCode": "  }\n\n  fun PackageInfo.isXposedModule(): Boolean {\n    return applicationInfo.metaData?.getBoolean(\"xposedmodule\") == true ||\n      applicationInfo.metaData?.containsKey(\"xposedminversion\") == true"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "87099a44a0038438016f947d75d7521cec7b73e716cf722fb8288303f6804d80"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isUse32BitAbi' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/PackageUtils.kt",
      "language": "kotlin",
      "line": 1332,
      "offset": 23,
      "length": 13,
      "code": {
        "startLine": 1330,
        "length": 13,
        "offset": 27,
        "surroundingCode": "  }\n\n  fun ApplicationInfo.isUse32BitAbi(): Boolean {\n    runCatching {\n      val demands = ManifestReader.getManifestProperties(File(sourceDir), arrayOf(\"use32bitAbi\"))"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "029ac4ea7b3725d6e3d91dfbd60b17292a60c76d3c4c064735bd1e82a7b12e26"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isRxJavaUsed' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/PackageUtils.kt",
      "language": "kotlin",
      "line": 1411,
      "offset": 19,
      "length": 12,
      "code": {
        "startLine": 1409,
        "length": 12,
        "offset": 70,
        "surroundingCode": "   * @return true if it uses RxJava framework\n   */\n  fun PackageInfo.isRxJavaUsed(foundList: List<String>? = null): Boolean {\n    val usedInMetaInf = runCatching {\n      val file = File(applicationInfo.sourceDir)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "762a73711bad308d79330e7c3c7697a36370e71e9328d2d18101b03725f46812"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isSplitsApk' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/PackageUtils.kt",
      "language": "kotlin",
      "line": 406,
      "offset": 19,
      "length": 11,
      "code": {
        "startLine": 404,
        "length": 11,
        "offset": 64,
        "surroundingCode": "   * @return true if it uses split apks\n   */\n  fun PackageInfo.isSplitsApk(): Boolean {\n    return !applicationInfo.splitSourceDirs.isNullOrEmpty()\n  }"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "dc80ce41c762c8f91df0d2eb0913d8d96394ddc4e809e396d70da5d6d8d943f3"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isPWA' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/PackageUtils.kt",
      "language": "kotlin",
      "line": 1317,
      "offset": 19,
      "length": 5,
      "code": {
        "startLine": 1315,
        "length": 5,
        "offset": 23,
        "surroundingCode": "  }\n\n  fun PackageInfo.isPWA(): Boolean {\n    return applicationInfo.metaData?.keySet()\n      ?.any { it.startsWith(\"org.chromium.webapk.shell_apk\") } == true"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "225ae50ade93bfab3051d354f3d7efe77ab2dd02cfa0ad370060bb015d0737ec"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isKotlinUsed' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/PackageUtils.kt",
      "language": "kotlin",
      "line": 414,
      "offset": 19,
      "length": 12,
      "code": {
        "startLine": 412,
        "length": 12,
        "offset": 69,
        "surroundingCode": "   * @return true if it uses Kotlin language\n   */\n  fun PackageInfo.isKotlinUsed(): Boolean {\n    return runCatching {\n      val file = File(applicationInfo.sourceDir)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "0b3217e8e4cfa32202a648a5c2abcfc4491737ee4b4624fa9ff9339d6b2dfe19"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isRxKotlinUsed' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/PackageUtils.kt",
      "language": "kotlin",
      "line": 1480,
      "offset": 19,
      "length": 14,
      "code": {
        "startLine": 1478,
        "length": 14,
        "offset": 72,
        "surroundingCode": "   * @return true if it uses RxKotlin framework\n   */\n  fun PackageInfo.isRxKotlinUsed(foundList: List<String>? = null): Boolean {\n    val usedInMetaInf = runCatching {\n      val file = File(applicationInfo.sourceDir)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "f7c53b7d8b1a8b8c961f143a141630110f636212343f51e78ba9575ce56dde3e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'enableRoundCorner' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/view/snapshot/SnapshotStateIndicatorView.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 12,
        "length": 17,
        "offset": 76,
        "surroundingCode": "\nclass SnapshotStateIndicatorView(context: Context) : View(context) {\n  var enableRoundCorner: Boolean = true\n  var added: Boolean = false\n  var removed: Boolean = false"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "4dde55e920f9fbbf5a19d772190d8aad32900efc7b5dbba384e8dc86fb91dc5f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_shentsize' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 16,
        "length": 11,
        "offset": 86,
        "surroundingCode": "  val e_phentsize = ByteArray(ELF64_HALF)\n  val e_phnum = ByteArray(ELF64_HALF)\n  val e_shentsize = ByteArray(ELF64_HALF)\n  val e_shnum = ByteArray(ELF64_HALF)\n  val e_shstrndx = ByteArray(ELF64_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "dbc9f076ad55b6cc90f5a3112d488314ccd353945f8288c006ebb7b01c7cdf45"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_entry' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 9,
        "length": 7,
        "offset": 86,
        "surroundingCode": "  val e_machine = ByteArray(ELF64_HALF)\n  val e_version = ByteArray(ELF64_WORD)\n  val e_entry = ByteArray(ELF64_ADDR)\n  val e_phoff = ByteArray(ELF64_OFF)\n  val e_shoff = ByteArray(ELF64_OFF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b73cb018d2808b91567eabad1a7319b701dc6e86f53d53fbb9a3c166dfdad3fd"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_phnum' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 15,
        "length": 7,
        "offset": 87,
        "surroundingCode": "  val e_ehsize = ByteArray(ELF64_HALF)\n  val e_phentsize = ByteArray(ELF64_HALF)\n  val e_phnum = ByteArray(ELF64_HALF)\n  val e_shentsize = ByteArray(ELF64_HALF)\n  val e_shnum = ByteArray(ELF64_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c0f4e059af5d77001ed078fc1abbe8030476a485744bf9b862aed6a139c0aca5"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_flags' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 12,
        "length": 7,
        "offset": 80,
        "surroundingCode": "  val e_phoff = ByteArray(ELF64_OFF)\n  val e_shoff = ByteArray(ELF64_OFF)\n  val e_flags = ByteArray(ELF64_WORD)\n  val e_ehsize = ByteArray(ELF64_HALF)\n  val e_phentsize = ByteArray(ELF64_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b38043bacc3e52343f085ede3331dd9275184168e6a3cf53665d220cdc71dd2c"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isElf' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 26,
        "length": 5,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun isElf(): Boolean {\n    return e_ident[0].toInt() == 0x7F &&\n      e_ident[1].toInt().toChar() == 'E' &&"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "fda17b0194f02b8cd824d8feb7128f1a1aedfa2fd0de6c2adb554cc9f7609a8d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_shnum' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 17,
        "length": 7,
        "offset": 86,
        "surroundingCode": "  val e_phnum = ByteArray(ELF64_HALF)\n  val e_shentsize = ByteArray(ELF64_HALF)\n  val e_shnum = ByteArray(ELF64_HALF)\n  val e_shstrndx = ByteArray(ELF64_HALF)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ca025d46ed5664be1dc54ea41d89ec2722456a0b7fddb84d5fdc2fd28705d96a"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_phoff' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 10,
        "length": 7,
        "offset": 84,
        "surroundingCode": "  val e_version = ByteArray(ELF64_WORD)\n  val e_entry = ByteArray(ELF64_ADDR)\n  val e_phoff = ByteArray(ELF64_OFF)\n  val e_shoff = ByteArray(ELF64_OFF)\n  val e_flags = ByteArray(ELF64_WORD)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b7820a365bbe0a13d1dee52c0b2bcae6ce72dfb110d3bc1b1fa4e077b63e6181"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_machine' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 7,
        "length": 9,
        "offset": 96,
        "surroundingCode": "  val e_ident = ByteArray(UNSIGNED_CHAR * EI_NIDENT)\n  val e_type = ByteArray(ELF64_HALF)\n  val e_machine = ByteArray(ELF64_HALF)\n  val e_version = ByteArray(ELF64_WORD)\n  val e_entry = ByteArray(ELF64_ADDR)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "3469592c58b8b8b2fefd3763435bbcffb91ea281898ccb7fff0f7de70a56c7e2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_version' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 8,
        "length": 9,
        "offset": 83,
        "surroundingCode": "  val e_type = ByteArray(ELF64_HALF)\n  val e_machine = ByteArray(ELF64_HALF)\n  val e_version = ByteArray(ELF64_WORD)\n  val e_entry = ByteArray(ELF64_ADDR)\n  val e_phoff = ByteArray(ELF64_OFF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ba137b9f3d5150f481fd5a1e54daccdd0fdb5ae784ff74a37dd7107996a512c3"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_shstrndx' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 18,
        "length": 10,
        "offset": 86,
        "surroundingCode": "  val e_shentsize = ByteArray(ELF64_HALF)\n  val e_shnum = ByteArray(ELF64_HALF)\n  val e_shstrndx = ByteArray(ELF64_HALF)\n\n  private constructor()"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "8828d26e568a224df8b778b3664fac1a27834ee4ac19a3de7f8ea64d842f4d9a"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_ident' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 7,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 5,
        "length": 7,
        "offset": 31,
        "surroundingCode": "\nclass ELF64EhdrParser {\n  val e_ident = ByteArray(UNSIGNED_CHAR * EI_NIDENT)\n  val e_type = ByteArray(ELF64_HALF)\n  val e_machine = ByteArray(ELF64_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ef12b2225827813175135220f8e284be8bce3ea94a198c43b3a348f9b8e4ea57"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_phentsize' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 14,
        "length": 11,
        "offset": 83,
        "surroundingCode": "  val e_flags = ByteArray(ELF64_WORD)\n  val e_ehsize = ByteArray(ELF64_HALF)\n  val e_phentsize = ByteArray(ELF64_HALF)\n  val e_phnum = ByteArray(ELF64_HALF)\n  val e_shentsize = ByteArray(ELF64_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "bd77574f82801e45562d0594ffc27f78bca6ff183defef3294603650accc489d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_shoff' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 11,
        "length": 7,
        "offset": 81,
        "surroundingCode": "  val e_entry = ByteArray(ELF64_ADDR)\n  val e_phoff = ByteArray(ELF64_OFF)\n  val e_shoff = ByteArray(ELF64_OFF)\n  val e_flags = ByteArray(ELF64_WORD)\n  val e_ehsize = ByteArray(ELF64_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6880114bbcb56cfec650e75fe8aab434d7add807c5994718246a68a05f61f35f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_type' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 6,
        "length": 6,
        "offset": 83,
        "surroundingCode": "class ELF64EhdrParser {\n  val e_ident = ByteArray(UNSIGNED_CHAR * EI_NIDENT)\n  val e_type = ByteArray(ELF64_HALF)\n  val e_machine = ByteArray(ELF64_HALF)\n  val e_version = ByteArray(ELF64_WORD)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "bfecf2099ff375954adf08ddcece9c19248e5a142312e04009068495dedf07be"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'e_ehsize' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 13,
        "length": 8,
        "offset": 81,
        "surroundingCode": "  val e_shoff = ByteArray(ELF64_OFF)\n  val e_flags = ByteArray(ELF64_WORD)\n  val e_ehsize = ByteArray(ELF64_HALF)\n  val e_phentsize = ByteArray(ELF64_HALF)\n  val e_phnum = ByteArray(ELF64_HALF)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "5ef0cc6706e9b1dc558bfe0aa96fe8299d30df1c8f964d6fb72645ad5ac80b5f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'refreshList' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/viewmodel/HomeViewModel.kt",
      "language": "kotlin",
      "line": 86,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 84,
        "length": 11,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun refreshList() {\n    setEffect {\n      Effect.RefreshList()"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "a51dc0c91822d52f2f255b8a1a950ca68b1b0b6c81c14d8266ee71596801a474"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'enableRoundCorner' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/view/snapshot/SnapshotTypeIndicatorView.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 16,
        "length": 17,
        "offset": 81,
        "surroundingCode": "\nclass SnapshotTypeIndicatorView(context: Context) : AViewGroup(context) {\n  var enableRoundCorner: Boolean = true\n\n  private val text ="
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6645bcab8a0c87ba834eeea3f92ee75ec6feaee0622f595aed490b128bd5df71"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'toAtMostMeasureSpec' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/view/AViewGroup.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 38,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun Int.toAtMostMeasureSpec(): Int {\n    return MeasureSpec.makeMeasureSpec(this, MeasureSpec.AT_MOST)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2553b0fa99f0de9b7587d4556eaf8fdd0367554ece46f3be9e50f40e2ab04a06"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'updatedTime' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/view/detail/LibDetailBottomSheetView.kt",
      "language": "kotlin",
      "line": 298,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 296,
        "length": 11,
        "offset": 15,
        "surroundingCode": "    }\n\n    var updatedTime: LibDetailItemView? = null\n\n    init {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c90522d8d1eb131335434fa10e2c0896538d8127ec88b56e63e31e0838aff01e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'lastPackageChangedTime' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/ui/fragment/BaseListControllerFragment.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 17,
        "length": 9,
        "offset": 76,
        "surroundingCode": "  protected var allowRefreshing = true\n  protected var menu: Menu? = null\n  protected var lastPackageChangedTime: Long = 0\n\n  override fun onVisibilityChanged(visible: Boolean) {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "1a80acb0355bf98113c4394b4a2bc2c5f890568193938736015104d4aa63bace"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'animationDuration' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/view/app/HeightAnimatableLinearLayout.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 12,
        "length": 17,
        "offset": 88,
        "surroundingCode": "\nclass HeightAnimatableLinearLayout : LinearLayout, View.OnLayoutChangeListener {\n  var animationDuration = 350L\n  private var animator: ValueAnimator = ObjectAnimator()\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "7d57c13a2db122db4e3515042f47fe625945e5d2320db988ac099476967c8c2f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant diagnostic suppression",
  "severity": "High",
  "comment": "Redundant suppression",
  "detailsInfo": "Reports usages of `@Suppress` annotations that can be safely removed because the compiler diagnostic they affect is no longer applicable in this context.\n\n**Example:**\n\n\n      fun doSmth(@Suppress(\"UNUSED_PARAMETER\") used: Int) {\n        println(used)\n      }\n\nAfter the quick-fix is applied:\n\n\n      fun doSmth(used: Int) {\n        println(used)\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/compat/VersionCompat.kt",
      "language": "kotlin",
      "line": 1,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 1,
        "length": 11,
        "offset": 16,
        "surroundingCode": "@file:Suppress(\"DEPRECATION\")\n\npackage com.absinthe.libchecker.compat"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "KotlinRedundantDiagnosticSuppress"
  },
  "hash": "b6b39f4946636def321267f80dc9220b00d49ecf63468144e71f3a0236429d52"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/IWorkerService.aidl",
      "language": "",
      "line": 1,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 11,
        "surroundingCode": "package com.absinthe.libchecker.services;\nimport com.absinthe.libchecker.services.OnWorkerListener;\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "0938291ce17e062f23b30d742b8a15b5c79c72b32dd96f01a7ddf014cbb4bf31"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/IWorkerService.aidl",
      "language": "",
      "line": 1,
      "offset": 21,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 20,
        "surroundingCode": "package com.absinthe.libchecker.services;\nimport com.absinthe.libchecker.services.OnWorkerListener;\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "5cf0ed768176ac811c9f366080589a917c4bdf75706dd5910b8153f06ba20076"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/IWorkerService.aidl",
      "language": "",
      "line": 1,
      "offset": 32,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 31,
        "surroundingCode": "package com.absinthe.libchecker.services;\nimport com.absinthe.libchecker.services.OnWorkerListener;\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "001e58c6b1f48fcebc1d8a69a703dd9df7cd983ed2f86e878be8b661af355c53"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/IWorkerService.aidl",
      "language": "",
      "line": 2,
      "offset": 11,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 52,
        "surroundingCode": "package com.absinthe.libchecker.services;\nimport com.absinthe.libchecker.services.OnWorkerListener;\n\ninterface IWorkerService {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "37f4bf3b02e75b406259e7b6708de0ba0010f4d4c916ee474eb332201b04800e"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/IWorkerService.aidl",
      "language": "",
      "line": 2,
      "offset": 20,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 61,
        "surroundingCode": "package com.absinthe.libchecker.services;\nimport com.absinthe.libchecker.services.OnWorkerListener;\n\ninterface IWorkerService {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "828df145615bd9b2efe4460b4209e96e4c58dd235ba3ea5a1d295c4fc069d25d"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/IWorkerService.aidl",
      "language": "",
      "line": 2,
      "offset": 31,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 72,
        "surroundingCode": "package com.absinthe.libchecker.services;\nimport com.absinthe.libchecker.services.OnWorkerListener;\n\ninterface IWorkerService {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "3c6676c2c59765560f10bd2f271ba631e421bbe96ec7e58e36e073ed7f4dbd0c"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/IWorkerService.aidl",
      "language": "",
      "line": 2,
      "offset": 40,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 81,
        "surroundingCode": "package com.absinthe.libchecker.services;\nimport com.absinthe.libchecker.services.OnWorkerListener;\n\ninterface IWorkerService {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "d68d0f346c4f9c6226c8edfb930a8d312fa2a991100b26c4b31eafdbf47a02e9"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/OnShootListener.aidl",
      "language": "",
      "line": 2,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 35,
        "surroundingCode": "// OnShootListener.aidl\npackage com.absinthe.libchecker.services;\n\n// Declare any non-default types here with import statements"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "1ca2f44fbdd001028c10398503cdb79a2c083798840ad4f8f29b5ec886a6fbba"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/OnShootListener.aidl",
      "language": "",
      "line": 2,
      "offset": 21,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 44,
        "surroundingCode": "// OnShootListener.aidl\npackage com.absinthe.libchecker.services;\n\n// Declare any non-default types here with import statements"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "474cb1001c0d89277337b9880c6a5cae3f2a0d0adecfb9c61140b15c65ed9bad"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/OnShootListener.aidl",
      "language": "",
      "line": 2,
      "offset": 32,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 55,
        "surroundingCode": "// OnShootListener.aidl\npackage com.absinthe.libchecker.services;\n\n// Declare any non-default types here with import statements"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "0b93ea0c2bcddad93ed8835d82fd4c415b55982843aeb44febfa937c5bc7acab"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/OnWorkerListener.aidl",
      "language": "",
      "line": 1,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 11,
        "surroundingCode": "package com.absinthe.libchecker.services;\n\ninterface OnWorkerListener {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "1db3474cf496c76e4af98b7e965cdd8f80ae5e774cd2082af8c4ff0650412e44"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/OnWorkerListener.aidl",
      "language": "",
      "line": 1,
      "offset": 21,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 20,
        "surroundingCode": "package com.absinthe.libchecker.services;\n\ninterface OnWorkerListener {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "845ef0c75506f0b0dba52d3ea7285b5619917d4f93cd6a1707ac1ea3e89b37f3"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/OnWorkerListener.aidl",
      "language": "",
      "line": 1,
      "offset": 32,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 31,
        "surroundingCode": "package com.absinthe.libchecker.services;\n\ninterface OnWorkerListener {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "00b62d43f1fae8cc1d4d5be061f58a0628f6ea8f8a152d4b96a9d6e125395c62"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/IShootService.aidl",
      "language": "",
      "line": 2,
      "offset": 12,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 33,
        "surroundingCode": "// IShootService.aidl\npackage com.absinthe.libchecker.services;\nimport com.absinthe.libchecker.services.OnShootListener;\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "53002044c94bfb3d9c199859de883317752e2f1275682ac8a4b89e880af370a8"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/IShootService.aidl",
      "language": "",
      "line": 2,
      "offset": 21,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 42,
        "surroundingCode": "// IShootService.aidl\npackage com.absinthe.libchecker.services;\nimport com.absinthe.libchecker.services.OnShootListener;\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "8a207d52d33310b2abb2155c736418d323159408891cbf17c53ee6b1ba4744f5"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/IShootService.aidl",
      "language": "",
      "line": 2,
      "offset": 32,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 53,
        "surroundingCode": "// IShootService.aidl\npackage com.absinthe.libchecker.services;\nimport com.absinthe.libchecker.services.OnShootListener;\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "6e34e3fc3841d17e2d6af70d315ed5bab12587403d151d41decd88354a86efcf"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/IShootService.aidl",
      "language": "",
      "line": 3,
      "offset": 11,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 74,
        "surroundingCode": "// IShootService.aidl\npackage com.absinthe.libchecker.services;\nimport com.absinthe.libchecker.services.OnShootListener;\n\n// Declare any non-default types here with import statements"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "610345838d1e0a387ba93b3b0d69f7b237a22c4f6365bdde5f9f67879efba9e1"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/IShootService.aidl",
      "language": "",
      "line": 3,
      "offset": 20,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 83,
        "surroundingCode": "// IShootService.aidl\npackage com.absinthe.libchecker.services;\nimport com.absinthe.libchecker.services.OnShootListener;\n\n// Declare any non-default types here with import statements"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "57d36cb74cf8b81fdd537ce18d4f79bddb236657dfd7980ca836bc90ac141a55"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/IShootService.aidl",
      "language": "",
      "line": 3,
      "offset": 31,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 94,
        "surroundingCode": "// IShootService.aidl\npackage com.absinthe.libchecker.services;\nimport com.absinthe.libchecker.services.OnShootListener;\n\n// Declare any non-default types here with import statements"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "5c369ef6413d54bfaf78142d5cc53eb5b88eb656073c761cb6b455d7e2d7fb78"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Java annotator",
  "severity": "Critical",
  "comment": "Illegal character: . (U+002E)",
  "detailsInfo": "Allows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/aidl/com/absinthe/libchecker/services/IShootService.aidl",
      "language": "",
      "line": 3,
      "offset": 40,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 103,
        "surroundingCode": "// IShootService.aidl\npackage com.absinthe.libchecker.services;\nimport com.absinthe.libchecker.services.OnShootListener;\n\n// Declare any non-default types here with import statements"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "JavaAnnotator"
  },
  "hash": "121bf71f6aa50089565eb928d9f82aceaec55c21e9a659cf8d9cbf6bb0f86ddc"
},{
  "tool": "Code Inspection",
  "category": "Android",
  "type": "Android XML element is not allowed",
  "severity": "High",
  "comment": "Element monochrome is not allowed here",
  "detailsInfo": "This inspection highlights unallowed XML tags in Android resource files and AndroidManifest.xml",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml",
      "language": "XML",
      "line": 5,
      "offset": 4,
      "length": 10,
      "code": {
        "startLine": 3,
        "length": 10,
        "offset": 132,
        "surroundingCode": "  <background android:drawable=\"@color/ic_launcher_back\" />\n  <foreground android:drawable=\"@drawable/ic_launcher_foreground\" />\n  <monochrome android:drawable=\"@drawable/launcher_icon_monochrome\" />\n</adaptive-icon>\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "AndroidElementNotAllowed"
  },
  "hash": "2f5a9ae3ef6cadd1d020f51cbbc175f2953a4b4ed055b05068661a8ac7b4662b"
},{
  "tool": "Code Inspection",
  "category": "Android",
  "type": "Android XML element is not allowed",
  "severity": "High",
  "comment": "Element monochrome is not allowed here",
  "detailsInfo": "This inspection highlights unallowed XML tags in Android resource files and AndroidManifest.xml",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml",
      "language": "XML",
      "line": 5,
      "offset": 4,
      "length": 10,
      "code": {
        "startLine": 3,
        "length": 10,
        "offset": 132,
        "surroundingCode": "  <background android:drawable=\"@color/ic_launcher_back\" />\n  <foreground android:drawable=\"@drawable/ic_launcher_foreground\" />\n  <monochrome android:drawable=\"@drawable/launcher_icon_monochrome\" />\n</adaptive-icon>\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "AndroidElementNotAllowed"
  },
  "hash": "75bd722af6c5943f6843c09e8774b50a88de2051adbe98f58bf5399bd27cc6b8"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/foss/kotlin/ohos/bundle/IBundleManager.kt",
      "language": "kotlin",
      "line": 4,
      "offset": 7,
      "length": 18,
      "code": {
        "startLine": 2,
        "length": 18,
        "offset": 31,
        "surroundingCode": "\nobject IBundleManager {\n  val GET_BUNDLE_DEFAULT: Int = 0\n  val GET_BUNDLE_WITH_ABILITIES: Int = 0\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MayBeConstant"
  },
  "hash": "bd4a838367904489cb109c83acc41f86f4f356cecf81e6f336ab1c45ed1dd41e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/foss/kotlin/ohos/bundle/IBundleManager.kt",
      "language": "kotlin",
      "line": 5,
      "offset": 7,
      "length": 25,
      "code": {
        "startLine": 3,
        "length": 25,
        "offset": 64,
        "surroundingCode": "object IBundleManager {\n  val GET_BUNDLE_DEFAULT: Int = 0\n  val GET_BUNDLE_WITH_ABILITIES: Int = 0\n\n  fun getBundleInfo(bundleName: String, flags: Int): BundleInfo {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MayBeConstant"
  },
  "hash": "101681147709fdd3adcadd8b329126ea35194f98593a643384627f480bd6cf56"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/entity/Features.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 4,
        "length": 3,
        "offset": 61,
        "surroundingCode": "  val SPLIT_APKS = 1 shl 0\n  val KOTLIN_USED = 1 shl 1\n  val AGP = 1 shl 2\n  val XPOSED_MODULE = 1 shl 3\n  val PLAY_SIGNING = 1 shl 4"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MayBeConstant"
  },
  "hash": "0ebbf1ed743dd7eb25c3df80acdc3db122cb25a3ea9b0456d7a5d2420adf94e7"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/entity/Features.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 6,
        "length": 12,
        "offset": 56,
        "surroundingCode": "  val AGP = 1 shl 2\n  val XPOSED_MODULE = 1 shl 3\n  val PLAY_SIGNING = 1 shl 4\n  val PWA = 1 shl 5\n  val JETPACK_COMPOSE = 1 shl 6"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MayBeConstant"
  },
  "hash": "095fc2a5ea738305d8080dc9bca95f4bccc9872760186ba18d1d02f423e90783"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/entity/Features.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 7,
        "length": 3,
        "offset": 65,
        "surroundingCode": "  val XPOSED_MODULE = 1 shl 3\n  val PLAY_SIGNING = 1 shl 4\n  val PWA = 1 shl 5\n  val JETPACK_COMPOSE = 1 shl 6\n  val RX_JAVA = 1 shl 7"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MayBeConstant"
  },
  "hash": "af87965a2901255bfe0bcebf4b8f182311bf629c156dbcf1ceee0e057e0a11a2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/entity/Features.kt",
      "language": "kotlin",
      "line": 5,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 3,
        "length": 11,
        "offset": 51,
        "surroundingCode": "object Features {\n  val SPLIT_APKS = 1 shl 0\n  val KOTLIN_USED = 1 shl 1\n  val AGP = 1 shl 2\n  val XPOSED_MODULE = 1 shl 3"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MayBeConstant"
  },
  "hash": "a57983e99137ebe6beaa08b4efcc0f470d909f912db3647937fe33465beb17ad"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/entity/Features.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 10,
        "length": 9,
        "offset": 62,
        "surroundingCode": "  val JETPACK_COMPOSE = 1 shl 6\n  val RX_JAVA = 1 shl 7\n  val RX_KOTLIN = 1 shl 8\n  val RX_ANDROID = 1 shl 9\n}"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MayBeConstant"
  },
  "hash": "568c62fb6c48fc2ac4caf8d057a7b5d3a91a11d495bf88af498e3c3e726bf844"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/entity/Features.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 11,
        "length": 10,
        "offset": 56,
        "surroundingCode": "  val RX_JAVA = 1 shl 7\n  val RX_KOTLIN = 1 shl 8\n  val RX_ANDROID = 1 shl 9\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MayBeConstant"
  },
  "hash": "d300249eebb8041072aadca6807f586aa1fbc1d8f6255d723ea162204d08f843"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/entity/Features.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 9,
        "length": 7,
        "offset": 58,
        "surroundingCode": "  val PWA = 1 shl 5\n  val JETPACK_COMPOSE = 1 shl 6\n  val RX_JAVA = 1 shl 7\n  val RX_KOTLIN = 1 shl 8\n  val RX_ANDROID = 1 shl 9"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MayBeConstant"
  },
  "hash": "4648ed964eb8c0e75949fc1000b0e94e41f778c3c267161e1d7cefad5989159c"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/entity/Features.kt",
      "language": "kotlin",
      "line": 4,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 2,
        "length": 10,
        "offset": 25,
        "surroundingCode": "\nobject Features {\n  val SPLIT_APKS = 1 shl 0\n  val KOTLIN_USED = 1 shl 1\n  val AGP = 1 shl 2"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MayBeConstant"
  },
  "hash": "923ba1eaa4fbd5dc5e2a52772353252c652ed35a05edd4195f7ee1469b1b190f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/entity/Features.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 8,
        "length": 15,
        "offset": 55,
        "surroundingCode": "  val PLAY_SIGNING = 1 shl 4\n  val PWA = 1 shl 5\n  val JETPACK_COMPOSE = 1 shl 6\n  val RX_JAVA = 1 shl 7\n  val RX_KOTLIN = 1 shl 8"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MayBeConstant"
  },
  "hash": "d8cadd1945e10042a325de618b6172d6b1e0b7cc583c67f2280c540eb1641a01"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/entity/Features.kt",
      "language": "kotlin",
      "line": 7,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 5,
        "length": 13,
        "offset": 54,
        "surroundingCode": "  val KOTLIN_USED = 1 shl 1\n  val AGP = 1 shl 2\n  val XPOSED_MODULE = 1 shl 3\n  val PLAY_SIGNING = 1 shl 4\n  val PWA = 1 shl 5"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "MayBeConstant"
  },
  "hash": "d63c4a9a27d3accc0915c35cd63be206033932ad52d270e4c092afe854aa3385"
},{
  "tool": "Code Inspection",
  "category": "Bitwise operation issues",
  "type": "Pointless bitwise expression",
  "severity": "High",
  "comment": "'1<<0' can be replaced with '1'",
  "detailsInfo": "Reports pointless bitwise expressions.\n\n\nSuch expressions include applying the `&` operator to the maximum value for the given type, applying the\n`or` operator to zero, and shifting by zero. Such expressions may be the result of automated\nrefactorings not followed through to completion and are unlikely to be originally intended.\n\n**Examples:**\n\n\n      // Warning: operation is pointless and can be replaced with just `flags`\n      // 0xFFFF_FFFF is the maximum value for an integer, and both literals are treated\n      // as 32 bit integer literals.\n      int bits = flags & 0xFFFF_FFFF;\n\n      // Warning: operation is pointless and can be replaced with just `bits`\n      // OR-ing with 0 always outputs the other operand.\n      int or = bits | 0x0;\n\n      // Warning: operation is pointless, as always results in 0\n      int xor = or ^ or;\n",
  "sources": [
    {
      "type": "file",
      "path": "hidden-api/src/main/java/android/content/pm/ApplicationInfoHidden.java",
      "language": "JAVA",
      "line": 8,
      "offset": 49,
      "length": 4,
      "code": {
        "startLine": 6,
        "length": 4,
        "offset": 86,
        "surroundingCode": "public class ApplicationInfoHidden {\n\n  public static final int PRIVATE_FLAG_HIDDEN = 1<<0;\n\n  public String primaryCpuAbi;"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.hidden-api.main",
    "inspectionName": "PointlessBitwiseExpression"
  },
  "hash": "f7e49b0c7d5dcb33f116fabfaac54bf33043cc4d260b57f93920dd799c99f59e"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 12,
      "offset": 6,
      "length": 4,
      "code": {
        "startLine": 10,
        "length": 4,
        "offset": 16,
        "surroundingCode": "\nplugins {\n  id(libs.plugins.android.application.get().pluginId)\n  id(libs.plugins.kotlin.android.get().pluginId)\n  id(libs.plugins.kotlin.parcelize.get().pluginId)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "1d2619f4a2c0716bae217de57daa26b751b444b1865baab3fba789ce18ed7c18"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 13,
      "offset": 6,
      "length": 4,
      "code": {
        "startLine": 11,
        "length": 4,
        "offset": 69,
        "surroundingCode": "plugins {\n  id(libs.plugins.android.application.get().pluginId)\n  id(libs.plugins.kotlin.android.get().pluginId)\n  id(libs.plugins.kotlin.parcelize.get().pluginId)\n  alias(libs.plugins.protobuf)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "16b9abc470266b512d4ce5018ec359771287f85ba122468e93256e63a8445592"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 14,
      "offset": 6,
      "length": 4,
      "code": {
        "startLine": 12,
        "length": 4,
        "offset": 108,
        "surroundingCode": "  id(libs.plugins.android.application.get().pluginId)\n  id(libs.plugins.kotlin.android.get().pluginId)\n  id(libs.plugins.kotlin.parcelize.get().pluginId)\n  alias(libs.plugins.protobuf)\n  alias(libs.plugins.hiddenApiRefine)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "e34ccfa7bfe9dcaea7e90e559c9ff1964656a10a111687dac1567e8d1831ad00"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 15,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 13,
        "length": 4,
        "offset": 108,
        "surroundingCode": "  id(libs.plugins.kotlin.android.get().pluginId)\n  id(libs.plugins.kotlin.parcelize.get().pluginId)\n  alias(libs.plugins.protobuf)\n  alias(libs.plugins.hiddenApiRefine)\n  alias(libs.plugins.ksp)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "5c199900774860f12e399dca2a45dc4b575f5590f785bef0eb30e55ab0c4a668"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 16,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 14,
        "length": 4,
        "offset": 90,
        "surroundingCode": "  id(libs.plugins.kotlin.parcelize.get().pluginId)\n  alias(libs.plugins.protobuf)\n  alias(libs.plugins.hiddenApiRefine)\n  alias(libs.plugins.ksp)\n  alias(libs.plugins.moshiX)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "ee3eec1cde7c1fcd6e1e81db1621a7fcb37e7311cfec840f133390551e3b133c"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 17,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 15,
        "length": 4,
        "offset": 77,
        "surroundingCode": "  alias(libs.plugins.protobuf)\n  alias(libs.plugins.hiddenApiRefine)\n  alias(libs.plugins.ksp)\n  alias(libs.plugins.moshiX)\n}"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "0132f3f311416c6f7db940f2405e6329cc0f5ad71b5fd6f00afb73b41e809083"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 18,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 16,
        "length": 4,
        "offset": 72,
        "surroundingCode": "  alias(libs.plugins.hiddenApiRefine)\n  alias(libs.plugins.ksp)\n  alias(libs.plugins.moshiX)\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "b9f20e86d011ee4367fedd99a7d574222998ae86b1ed8e223b06d1cab65a1df2"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "build.gradle.kts",
      "language": "kotlin",
      "line": 2,
      "offset": 6,
      "length": 4,
      "code": {
        "startLine": 1,
        "length": 4,
        "offset": 15,
        "surroundingCode": "plugins {\n  id(libs.plugins.android.application.get().pluginId) apply false\n  id(libs.plugins.android.library.get().pluginId) apply false\n  id(libs.plugins.kotlin.android.get().pluginId) apply false"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "036d73ad89a5054f5868e61ec9302623a408fa690291d4a53c494d1b8cf09d32"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "build.gradle.kts",
      "language": "kotlin",
      "line": 3,
      "offset": 6,
      "length": 4,
      "code": {
        "startLine": 1,
        "length": 4,
        "offset": 81,
        "surroundingCode": "plugins {\n  id(libs.plugins.android.application.get().pluginId) apply false\n  id(libs.plugins.android.library.get().pluginId) apply false\n  id(libs.plugins.kotlin.android.get().pluginId) apply false\n  alias(libs.plugins.protobuf) apply false"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "ce25f0fed22aa9efc47db921e1e3f04bcd3d0a30e16e507e9cbcf7a32c792106"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "build.gradle.kts",
      "language": "kotlin",
      "line": 4,
      "offset": 6,
      "length": 4,
      "code": {
        "startLine": 2,
        "length": 4,
        "offset": 133,
        "surroundingCode": "  id(libs.plugins.android.application.get().pluginId) apply false\n  id(libs.plugins.android.library.get().pluginId) apply false\n  id(libs.plugins.kotlin.android.get().pluginId) apply false\n  alias(libs.plugins.protobuf) apply false\n  alias(libs.plugins.kotlinter) apply false"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "4c1ada128a6a29365c2cb437c656b793764ad4f0e9c05362ac7e7a76c0d8362a"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "build.gradle.kts",
      "language": "kotlin",
      "line": 5,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 3,
        "length": 4,
        "offset": 131,
        "surroundingCode": "  id(libs.plugins.android.library.get().pluginId) apply false\n  id(libs.plugins.kotlin.android.get().pluginId) apply false\n  alias(libs.plugins.protobuf) apply false\n  alias(libs.plugins.kotlinter) apply false\n  alias(libs.plugins.hiddenApiRefine) apply false"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "1a00f9d76bffb88c6ec590b63892c152c02bf19ef184484159b0e913674a8993"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "build.gradle.kts",
      "language": "kotlin",
      "line": 6,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 4,
        "length": 4,
        "offset": 112,
        "surroundingCode": "  id(libs.plugins.kotlin.android.get().pluginId) apply false\n  alias(libs.plugins.protobuf) apply false\n  alias(libs.plugins.kotlinter) apply false\n  alias(libs.plugins.hiddenApiRefine) apply false\n  alias(libs.plugins.ksp) apply false"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "a3e5e63e8232e89ee2b56637a697fe21a305626e6eda7d32410d81592aab169a"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "build.gradle.kts",
      "language": "kotlin",
      "line": 7,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 5,
        "length": 4,
        "offset": 95,
        "surroundingCode": "  alias(libs.plugins.protobuf) apply false\n  alias(libs.plugins.kotlinter) apply false\n  alias(libs.plugins.hiddenApiRefine) apply false\n  alias(libs.plugins.ksp) apply false\n  alias(libs.plugins.moshiX) apply false"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "8ed5118a63c9d00062d520d1075c91103257798be21131e39b9ee7d5167339c7"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "build.gradle.kts",
      "language": "kotlin",
      "line": 8,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 6,
        "length": 4,
        "offset": 102,
        "surroundingCode": "  alias(libs.plugins.kotlinter) apply false\n  alias(libs.plugins.hiddenApiRefine) apply false\n  alias(libs.plugins.ksp) apply false\n  alias(libs.plugins.moshiX) apply false\n}"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "ec2383e9dfc0b5419f613dd83f887d90fbe11365aa2bc250a37c827791b1d891"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "build.gradle.kts",
      "language": "kotlin",
      "line": 9,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 7,
        "length": 4,
        "offset": 96,
        "surroundingCode": "  alias(libs.plugins.hiddenApiRefine) apply false\n  alias(libs.plugins.ksp) apply false\n  alias(libs.plugins.moshiX) apply false\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "94e7ceda69f0027987f2f4c40d978850e320c5a30261317322acc34ca88c9a3d"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "hidden-api/build.gradle.kts",
      "language": "kotlin",
      "line": 2,
      "offset": 6,
      "length": 4,
      "code": {
        "startLine": 1,
        "length": 4,
        "offset": 15,
        "surroundingCode": "plugins {\n  id(libs.plugins.android.library.get().pluginId)\n  id(libs.plugins.kotlin.android.get().pluginId)\n}"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.hidden-api",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "341058deb62fece38490ed71cb1371f51e4a1f15250c139d8144275bbfa0242a"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "'val Project.libs: LibrariesForLibs' can't be called in this context by implicit receiver. Use the explicit one if necessary",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "hidden-api/build.gradle.kts",
      "language": "kotlin",
      "line": 3,
      "offset": 6,
      "length": 4,
      "code": {
        "startLine": 1,
        "length": 4,
        "offset": 65,
        "surroundingCode": "plugins {\n  id(libs.plugins.android.library.get().pluginId)\n  id(libs.plugins.kotlin.android.get().pluginId)\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.hidden-api",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "44ec1c239fbc4a7b359bacdbf9e2e1b0b112aed3b9c141fcb282ca820d2c54d2"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Object property naming convention",
  "severity": "Moderate",
  "comment": "Object or top-level property name '_isHarmonyOs' should not start with an underscore",
  "detailsInfo": "Reports properties that do not follow the naming conventions.\n\nThe following properties are reported:\n\n* Top-level properties\n* Properties in objects and companion objects\n\nYou can specify the required pattern in the inspection options.\n\n[Recommended naming conventions](https://kotlinlang.org/docs/coding-conventions.html#naming-rules): it has to start with an uppercase letter, use camel case and no underscores.\n\n**Example:**\n\n\n      // top-level property\n      val USER_NAME_FIELD = \"UserName\"\n      // top-level property holding reference to singleton object\n      val PersonComparator: Comparator<Person> = /*...*/\n\n      class Person {\n        companion object {\n          // property in companion object\n          val NO_NAME = Person()\n        }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/harmony/HarmonyOsUtil.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 15,
      "length": 12,
      "code": {
        "startLine": 6,
        "length": 12,
        "offset": 38,
        "surroundingCode": "object HarmonyOsUtil {\n\n  private val _isHarmonyOs by lazy {\n    runCatching {\n      val clz = Class.forName(\"com.huawei.system.BuildEx\")"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "ObjectPropertyName"
  },
  "hash": "e082a72f319930c8647db4fcf5491f477dc79d894bf4eb5a4cbdb100f4c2429d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"showLongToast\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/Toasty.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 92,
        "length": 13,
        "offset": 24,
        "surroundingCode": "\n@AnyThread\nfun Context.showLongToast(message: String) {\n  Toasty.showLong(this, message)\n}"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b35eb0e4fafdc443364b07d1c1c3436156263fa6d1ca4aac836fe323d188d306"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"isExternalStorageReadable\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/StorageUtils.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 7,
      "length": 25,
      "code": {
        "startLine": 12,
        "length": 25,
        "offset": 72,
        "surroundingCode": "\n  /* Checks if external storage is available to at least read */\n  val isExternalStorageReadable: Boolean\n    get() {\n      val state = Environment.getExternalStorageState()"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "661f475c32f37df99c452e2a65e0bd290fcca0c0d26bc63c07cdd00c9d016ff8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toggleExpand\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/view/detail/ProcessIndicatorView.kt",
      "language": "kotlin",
      "line": 69,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 67,
        "length": 12,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun toggleExpand() {\n    if (isExpand) {\n      collapse()"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3878390bada023c752f3031be517eea61ae864c30a402271001e66707cb0e761"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"currentFragment\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/ui/fragment/detail/DetailFragmentManager.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 16,
        "length": 15,
        "offset": 36,
        "surroundingCode": "  var currentItemsCount = -1\n\n  var currentFragment: BaseDetailFragment<*>? = null\n    get() = map[selectedPosition]\n    private set"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "62afcc4546a8b91e073a9995c5586501d97d6a8546195ec8502c957c89c53806"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"currentSortable\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/ui/fragment/detail/DetailFragmentManager.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 20,
        "length": 15,
        "offset": 23,
        "surroundingCode": "    private set\n\n  var currentSortable: Sortable? = null\n    get() = map[selectedPosition]\n    private set"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e5cbccf9fa6d5bb16d2b866490dc0f1b3c97c5eb1666ef358e271be731a0339c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"mIBundleManager\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/foss/kotlin/com/absinthe/libchecker/utils/harmony/IBundleManagerDelegate.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 9,
        "length": 15,
        "offset": 88,
        "surroundingCode": "class IBundleManagerDelegate(applicationDelegate: ApplicationDelegate) {\n\n  private val mIBundleManager: IBundleManager? = applicationDelegate.iBundleManager\n\n  fun getBundleInfo(bundleName: String, flags: Int): BundleInfo? = null"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "987b57e2e291cd2888553666dac7ebc46983e5852097b4dee7c0cfaa1c0377f6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"IBundleManagerDelegate\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/foss/kotlin/com/absinthe/libchecker/utils/harmony/IBundleManagerDelegate.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 7,
      "length": 22,
      "code": {
        "startLine": 7,
        "length": 22,
        "offset": 43,
        "surroundingCode": " * Created by su1216 on 21-6-28.\n */\nclass IBundleManagerDelegate(applicationDelegate: ApplicationDelegate) {\n\n  private val mIBundleManager: IBundleManager? = applicationDelegate.iBundleManager"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "047e43db175087bfdb004b6ad95c8c5f950d8cedaa709172bed84262d414f144"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getBundleInfo\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/foss/kotlin/com/absinthe/libchecker/utils/harmony/IBundleManagerDelegate.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 11,
        "length": 13,
        "offset": 91,
        "surroundingCode": "  private val mIBundleManager: IBundleManager? = applicationDelegate.iBundleManager\n\n  fun getBundleInfo(bundleName: String, flags: Int): BundleInfo? = null\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4869115d3caf6f2f0d43a59351b8d014f0080d3c6ed1d722330e9ff2bf48f3bc"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"contextRef\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/foss/kotlin/com/absinthe/libchecker/about/Renge.kt",
      "language": "kotlin",
      "line": 7,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 5,
        "length": 10,
        "offset": 60,
        "surroundingCode": "import java.lang.ref.WeakReference\n\nclass Renge(private val contextRef: WeakReference<Context>) {\n\n  val renge: Bitmap? = null"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2f0d23317aed91118b03c1356847a873977ec47ee0c4b6d62976dcf3f1d40e10"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"RemoteException\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/foss/kotlin/ohos/rpc/RemoteException.kt",
      "language": "kotlin",
      "line": 3,
      "offset": 8,
      "length": 15,
      "code": {
        "startLine": 1,
        "length": 15,
        "offset": 25,
        "surroundingCode": "package ohos.rpc\n\nobject RemoteException\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1146879f7b07221960c1c2086f89eb8ed70fb86cb6eea006adc3500aeae4d07c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"isDarkColor\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/UiUtils.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 19,
        "length": 11,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun isDarkColor(@ColorInt color: Int): Boolean {\n    val r = Color.red(color)\n    val g = Color.green(color)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e8f9167b05e9dadd1992ae47b848e985cf64de830a95fe206fe03f4242071244"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"setIconTintColorResource\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/view/detail/AppInfoItemView.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 7,
      "length": 24,
      "code": {
        "startLine": 92,
        "length": 24,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun setIconTintColorResource(@ColorRes res: Int) {\n    icon.imageTintList = res.toColorStateList(context)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a17da38ac385d3fa84c739bb0c59856ed0e31d8a2867cdd236c9a10020bbe2fb"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"setIcon\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/view/detail/AppInfoItemView.kt",
      "language": "kotlin",
      "line": 81,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 79,
        "length": 7,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun setIcon(drawable: Drawable, cleanBackground: Boolean) {\n    icon.setImageDrawable(drawable)\n    if (cleanBackground) {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1ded3b1fa1c2cd94b4958abb3f0f5a31f95aea46675fd459db612ddae13b8d0d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ET_HIPROC\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 23,
      "length": 9,
      "code": {
        "startLine": 77,
        "length": 9,
        "offset": 97,
        "surroundingCode": "    private const val ET_CORE = 4\n    private const val ET_LOPROC = 0xff00\n    private const val ET_HIPROC = 0xffff\n\n    // e_machine"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "85849f5b5ddb30a3e3f268b7f5d4256e124b57a7f3a0016a79bd76130da84d28"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"EM_SPARCV9\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 86,
      "offset": 23,
      "length": 10,
      "code": {
        "startLine": 84,
        "length": 10,
        "offset": 97,
        "surroundingCode": "    private const val EM_386 = 3\n    private const val EM_SPARC32PLUS = 18\n    private const val EM_SPARCV9 = 43\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "28240655995cd3d9d8fb04020beb5121e7101aa3bd80a67230fb9e2f485badea"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ELF32_SWORD\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 68,
      "offset": 23,
      "length": 11,
      "code": {
        "startLine": 66,
        "length": 11,
        "offset": 95,
        "surroundingCode": "    private const val ELF32_HALF = 2\n    private const val ELF32_OFF = 4\n    private const val ELF32_SWORD = 4\n    private const val ELF32_WORD = 4\n    private const val UNSIGNED_CHAR = 1"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "93c8d21fdd3b05ed7f889ca0a1b5f7b0993360b436e92e5e5a658f14f1fdde95"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 23,
      "offset": 11,
      "length": 11,
      "code": {
        "startLine": 21,
        "length": 11,
        "offset": 52,
        "surroundingCode": "  val e_shstrndx = ByteArray(ELF32_HALF)\n\n  private constructor()\n\n  constructor(inputStream: InputStream) {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5acc44f942a6380690d366dcdcd24446d108711fe4cbc0993a8c33da0dd24fd7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"EM_386\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 84,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 82,
        "length": 6,
        "offset": 91,
        "surroundingCode": "    private const val EM_NONE = 0\n    private const val EM_SPARC = 2\n    private const val EM_386 = 3\n    private const val EM_SPARC32PLUS = 18\n    private const val EM_SPARCV9 = 43"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "05e434e935ff8bd96d007e8be27cff19c60e37ff5f54f3db14516c7b288e4352"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ET_LOPROC\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 78,
      "offset": 23,
      "length": 9,
      "code": {
        "startLine": 76,
        "length": 9,
        "offset": 89,
        "surroundingCode": "    private const val ET_DYN = 3\n    private const val ET_CORE = 4\n    private const val ET_LOPROC = 0xff00\n    private const val ET_HIPROC = 0xffff\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d9c80c7b892f0f349724120c2c280a60decc4dcdfff12240482422a708432a69"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"EM_SPARC\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 83,
      "offset": 23,
      "length": 8,
      "code": {
        "startLine": 81,
        "length": 8,
        "offset": 73,
        "surroundingCode": "    // e_machine\n    private const val EM_NONE = 0\n    private const val EM_SPARC = 2\n    private const val EM_386 = 3\n    private const val EM_SPARC32PLUS = 18"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0c8243c60277fe04b0365298f37dbbd77a080f1e4eacfffc0700cd4c470d33c8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ET_EXEC\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 75,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 73,
        "length": 7,
        "offset": 89,
        "surroundingCode": "    private const val ET_NONE = 0\n    private const val ET_REL = 1\n    private const val ET_EXEC = 2\n    private const val ET_DYN = 3\n    private const val ET_CORE = 4"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8dd0d262bfe7dceff31fcf6c90a2daa35ab5b09788d6eb7b92c276869325de1f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ET_DYN\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 76,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 74,
        "length": 6,
        "offset": 89,
        "surroundingCode": "    private const val ET_REL = 1\n    private const val ET_EXEC = 2\n    private const val ET_DYN = 3\n    private const val ET_CORE = 4\n    private const val ET_LOPROC = 0xff00"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6b8fa94219789ef4a30b93efef2df4fa0e53935bd8bc2f55ab3969262d4c08ca"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ET_NONE\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 73,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 71,
        "length": 7,
        "offset": 37,
        "surroundingCode": "\n    // e_type\n    private const val ET_NONE = 0\n    private const val ET_REL = 1\n    private const val ET_EXEC = 2"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "95ce11b473a3493174780f940b6a1a0a3feaa860b94bcae47f0022a06771404d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"EM_SPARC32PLUS\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 85,
      "offset": 23,
      "length": 14,
      "code": {
        "startLine": 83,
        "length": 14,
        "offset": 90,
        "surroundingCode": "    private const val EM_SPARC = 2\n    private const val EM_386 = 3\n    private const val EM_SPARC32PLUS = 18\n    private const val EM_SPARCV9 = 43\n  }"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3016eb6f261e38eed6c03c4655c15539932ff7363b4043a222e49137962018d4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ET_REL\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 74,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 72,
        "length": 6,
        "offset": 70,
        "surroundingCode": "    // e_type\n    private const val ET_NONE = 0\n    private const val ET_REL = 1\n    private const val ET_EXEC = 2\n    private const val ET_DYN = 3"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4e1e8d4ec91995c2eeba91376a0dc88c393964e396cf3ee32fcc7dd20b0a2dd3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"EM_NONE\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 82,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 80,
        "length": 7,
        "offset": 40,
        "surroundingCode": "\n    // e_machine\n    private const val EM_NONE = 0\n    private const val EM_SPARC = 2\n    private const val EM_386 = 3"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7010e050c9fcaafd8da879fdecdc4d087b9a20aa2759c32bed225a678c0b1b89"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ET_CORE\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF32EhdrParser.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 75,
        "length": 7,
        "offset": 89,
        "surroundingCode": "    private const val ET_EXEC = 2\n    private const val ET_DYN = 3\n    private const val ET_CORE = 4\n    private const val ET_LOPROC = 0xff00\n    private const val ET_HIPROC = 0xffff"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "272378091b2243839cc73bf60ae89170e6c5750fbd9505852ad76c910e845ca7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"Season\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/annotation/Season.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 18,
      "length": 6,
      "code": {
        "startLine": 18,
        "length": 6,
        "offset": 149,
        "surroundingCode": "@Target(AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.FIELD, AnnotationTarget.FUNCTION)\n@Retention(AnnotationRetention.SOURCE)\nannotation class Season\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "23472334898fbe09939a1a6a106954bb2210b474c6c876b065e76fca258544e1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getFloat\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 54,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 52,
        "length": 8,
        "offset": 104,
        "surroundingCode": "fun Context.getDimensionPixelSize(@DimenRes id: Int) = resources.getDimensionPixelSize(id)\n\nfun Context.getFloat(@DimenRes id: Int) = resources.getFloatCompat(id)\n\nfun Context.getInteger(@IntegerRes id: Int) = resources.getInteger(id)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "fc3400df267abf922964b2fec6385288fff52d360760df33d586f1f1209ffec1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"hasW600Dp\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 164,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 162,
        "length": 9,
        "offset": 59,
        "surroundingCode": "  resources.configuration.screenWidthDp >= dp\n\nval Context.hasW600Dp: Boolean\n  get() = hasWDp(600)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0e8dd50fe7f9ab9d273aaab08ec36df1e7342db29f342ad6069533236e0e3cc6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getDimensionPixelOffset\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 50,
      "offset": 13,
      "length": 23,
      "code": {
        "startLine": 48,
        "length": 23,
        "offset": 86,
        "surroundingCode": "fun Context.getDimension(@DimenRes id: Int) = resources.getDimension(id)\n\nfun Context.getDimensionPixelOffset(@DimenRes id: Int) = resources.getDimensionPixelOffset(id)\n\nfun Context.getDimensionPixelSize(@DimenRes id: Int) = resources.getDimensionPixelSize(id)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d2af3dc91dfa6b9b2d4a1543807c5fc8c555d4b349fc7127edce96d9a72765a2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"dpToDimensionPixelSize\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 137,
      "offset": 13,
      "length": 22,
      "code": {
        "startLine": 135,
        "length": 22,
        "offset": 24,
        "surroundingCode": "\n@Dimension\nfun Context.dpToDimensionPixelSize(@Dimension(unit = Dimension.DP) dp: Int) =\n  dpToDimensionPixelSize(dp.toFloat())\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e015cc78998b0b42205d6c39b8dbbe659ec0233ddc78fadb6eb7ced5093cf8f9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getDimensionPixelOffsetByAttr\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 88,
      "offset": 13,
      "length": 29,
      "code": {
        "startLine": 86,
        "length": 29,
        "offset": 44,
        "surroundingCode": "\n@SuppressLint(\"RestrictedApi\")\nfun Context.getDimensionPixelOffsetByAttr(@AttrRes attr: Int): Int =\n  obtainStyledAttributesCompat(attrs = intArrayOf(attr)).use {\n    it.getDimensionPixelOffset(0, 0)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3c4a2e9d2e9640f1efa00657a283052cf40b531d3c327f2890af140812357029"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"hasW960Dp\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 167,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 165,
        "length": 9,
        "offset": 35,
        "surroundingCode": "  get() = hasWDp(600)\n\nval Context.hasW960Dp: Boolean\n  get() = hasWDp(960)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e5370c776b2547b9c62042fb558b0a0f504f51956db8b225ce3482c34236578a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"longAnimTime\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 146,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 144,
        "length": 12,
        "offset": 75,
        "surroundingCode": "  get() = getInteger(android.R.integer.config_mediumAnimTime)\n\nval Context.longAnimTime: Int\n  get() = getInteger(android.R.integer.config_longAnimTime)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c0ec4d5627000a41f6b8c5973e37bc9b183927dbe4ba3284a20c8015ec47fbc8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"isLightTheme\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 176,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 174,
        "length": 12,
        "offset": 97,
        "surroundingCode": "  get() = resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT\n\nval Context.isLightTheme: Boolean\n  get() = getBooleanByAttr(androidx.appcompat.R.attr.isLightTheme)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7ca32124255f0728ead75dcd6eae23b98189799c104586a19e68c4fe3016cd40"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"displayHeight\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 152,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 150,
        "length": 13,
        "offset": 60,
        "surroundingCode": "  get() = resources.displayMetrics.widthPixels\n\nval Context.displayHeight: Int\n  get() = resources.displayMetrics.heightPixels\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0f5455f99efbc68270741535cb28c8189f045c5f8cf32879d4b19b869d513196"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"displayWidth\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 149,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 147,
        "length": 12,
        "offset": 73,
        "surroundingCode": "  get() = getInteger(android.R.integer.config_longAnimTime)\n\nval Context.displayWidth: Int\n  get() = resources.displayMetrics.widthPixels\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "25b88d1933ca4f31f60dda3fc62d4243a13e3a46732ad699a2f689c96af508da"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"mediumAnimTime\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 143,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 141,
        "length": 14,
        "offset": 74,
        "surroundingCode": "  get() = getInteger(android.R.integer.config_shortAnimTime)\n\nval Context.mediumAnimTime: Int\n  get() = getInteger(android.R.integer.config_mediumAnimTime)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a5e5dedf00a1ff431ade168220f58719ba8224bbfea6377e1398c0b06e89ff40"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"layoutInflater\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 179,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 177,
        "length": 14,
        "offset": 80,
        "surroundingCode": "  get() = getBooleanByAttr(androidx.appcompat.R.attr.isLightTheme)\n\nval Context.layoutInflater: LayoutInflater\n  get() = LayoutInflater.from(this)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "9ecab3308948ea792a822f963ae89cb07ee35da54a75cc79e99e3e1bf8539fd1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getDimension\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 48,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 46,
        "length": 12,
        "offset": 81,
        "surroundingCode": "fun Context.getBoolean(@BoolRes id: Int) = resources.getBoolean(id)\n\nfun Context.getDimension(@DimenRes id: Int) = resources.getDimension(id)\n\nfun Context.getDimensionPixelOffset(@DimenRes id: Int) = resources.getDimensionPixelOffset(id)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2baa3d8073695341d76a6ea117e4011205365d8ad86238dc9ba7954f7fb717a3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getQuantityText\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 67,
      "offset": 13,
      "length": 15,
      "code": {
        "startLine": 65,
        "length": 15,
        "offset": 70,
        "surroundingCode": "  resources.getQuantityString(id, quantity, *formatArgs)\n\nfun Context.getQuantityText(@PluralsRes id: Int, quantity: Int): CharSequence =\n  resources.getQuantityText(id, quantity)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "9a4ce41a2f29ec444fd108d490ff01db0c13d6740e793831a194d08192371088"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"shortAnimTime\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 140,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 138,
        "length": 13,
        "offset": 52,
        "surroundingCode": "  dpToDimensionPixelSize(dp.toFloat())\n\nval Context.shortAnimTime: Int\n  get() = getInteger(android.R.integer.config_shortAnimTime)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c88a49982be2e48e16350f39f71f9f4af94bf2cd0a493b2b8bb3a34d523b9a29"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"dpToDimensionPixelOffset\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 121,
      "offset": 13,
      "length": 24,
      "code": {
        "startLine": 119,
        "length": 24,
        "offset": 24,
        "surroundingCode": "\n@Dimension\nfun Context.dpToDimensionPixelOffset(@Dimension(unit = Dimension.DP) dp: Int) =\n  dpToDimensionPixelOffset(dp.toFloat())\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "04c92b7851f61b2321c248fb569a603645acea51c7ba3ebf0aba7541319c520f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"hasSw600Dp\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 158,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 156,
        "length": 10,
        "offset": 67,
        "surroundingCode": "  resources.configuration.smallestScreenWidthDp >= dp\n\nval Context.hasSw600Dp: Boolean\n  get() = hasSwDp(600)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "57a12d08b0ca48597294b931e44dc5215c07ccec5210317d9368df7bdb486244"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getBoolean\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 44,
        "length": 10,
        "offset": 108,
        "surroundingCode": "fun Context.getAnimation(@AnimRes id: Int): Animation = AnimationUtils.loadAnimation(this, id)\n\nfun Context.getBoolean(@BoolRes id: Int) = resources.getBoolean(id)\n\nfun Context.getDimension(@DimenRes id: Int) = resources.getDimension(id)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a5d63677c88417975fe1af0e2bb316b9c62b07744ae53ee37562c0857db4db4e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"withTheme\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 182,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 180,
        "length": 9,
        "offset": 49,
        "surroundingCode": "  get() = LayoutInflater.from(this)\n\nfun Context.withTheme(@StyleRes themeRes: Int): Context =\n  if (themeRes != 0) ContextThemeWrapper(this, themeRes) else this\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c72b662b272ea491416030a7eacd48663ddd8881ef545034113cbcc7f41a8d86"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getInterpolator\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 58,
      "offset": 13,
      "length": 15,
      "code": {
        "startLine": 56,
        "length": 15,
        "offset": 84,
        "surroundingCode": "fun Context.getInteger(@IntegerRes id: Int) = resources.getInteger(id)\n\nfun Context.getInterpolator(@InterpolatorRes id: Int): Interpolator =\n  AnimationUtils.loadInterpolator(this, id)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2323fa00cd570171c137cfef1c5646f674af3f5279531036ba090ebc17aa60d4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getAnimation\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 42,
        "length": 12,
        "offset": 17,
        "surroundingCode": "  }\n\nfun Context.getAnimation(@AnimRes id: Int): Animation = AnimationUtils.loadAnimation(this, id)\n\nfun Context.getBoolean(@BoolRes id: Int) = resources.getBoolean(id)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b0ceec36a20465723652f1e0d7100254eeaab8fff2a732cd0b769d07811c61f5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getQuantityString\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 61,
      "offset": 13,
      "length": 17,
      "code": {
        "startLine": 59,
        "length": 17,
        "offset": 57,
        "surroundingCode": "  AnimationUtils.loadInterpolator(this, id)\n\nfun Context.getQuantityString(@PluralsRes id: Int, quantity: Int): String =\n  resources.getQuantityString(id, quantity)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "58f8eaf729955aa544212737dea3b83dbe4bdb9e4976eeeeaf49b7650bd5b9c9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getStringArray\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 70,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 68,
        "length": 14,
        "offset": 55,
        "surroundingCode": "  resources.getQuantityText(id, quantity)\n\nfun Context.getStringArray(@ArrayRes id: Int): Array<String> = resources.getStringArray(id)\n\n@SuppressLint(\"RestrictedApi\")"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "09d66528935dc03172c5675121e46dd8382a7eaeb0777965f4a9de0b3ed82f29"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getDimensionPixelSizeByAttr\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 13,
      "length": 27,
      "code": {
        "startLine": 92,
        "length": 27,
        "offset": 44,
        "surroundingCode": "\n@SuppressLint(\"RestrictedApi\")\nfun Context.getDimensionPixelSizeByAttr(@AttrRes attr: Int): Int =\n  obtainStyledAttributesCompat(attrs = intArrayOf(attr)).use { it.getDimensionPixelSize(0, 0) }\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "46f145df31950f231505ab87aae090b33b96b4c1cacb399ce834adac51aacde3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getFloatByAttr\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 102,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 100,
        "length": 14,
        "offset": 44,
        "surroundingCode": "\n@SuppressLint(\"RestrictedApi\")\nfun Context.getFloatByAttr(@AttrRes attr: Int): Float =\n  obtainStyledAttributesCompat(attrs = intArrayOf(attr)).use { it.getFloat(0, 0f) }\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1b10ac473d988df7aa487962f6986e1430ab300d9cfc3a6c17fa79584e9bb058"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"dpToDimension\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 114,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 112,
        "length": 13,
        "offset": 24,
        "surroundingCode": "\n@Dimension\nfun Context.dpToDimension(@Dimension(unit = Dimension.DP) dp: Int) = dpToDimension(dp.toFloat())\n\n@Dimension"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "35bddb9295191d5266c6f7726adc6bb6b5e98c195eb4f2842abd60beaf41185c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getQuantityString\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ContextExtensions.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 13,
      "length": 17,
      "code": {
        "startLine": 62,
        "length": 17,
        "offset": 57,
        "surroundingCode": "  resources.getQuantityString(id, quantity)\n\nfun Context.getQuantityString(@PluralsRes id: Int, quantity: Int, vararg formatArgs: Any?): String =\n  resources.getQuantityString(id, quantity, *formatArgs)\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ae29978380c799853b65edd05a9c5716971d46126e2374a0bbc558c6bda2b56c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"addChip\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/view/detail/ChipGroupView.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 17,
        "length": 7,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun addChip(icon: Drawable, text: String, clickAction: () -> Unit) {\n    addView(\n      Chip(context).also {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "cad342808a77fc97eb4e607042938c2f9c4f7869fc9c0d24ec27f2ce25668d07"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"SystemVersionDelegate\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/foss/kotlin/com/absinthe/libchecker/utils/harmony/SystemVersionDelegate.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 8,
      "length": 21,
      "code": {
        "startLine": 4,
        "length": 21,
        "offset": 44,
        "surroundingCode": " * Created by su1216 on 21-6-28.\n */\nobject SystemVersionDelegate {\n  fun getVersion(): String? = null\n}"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f8dd8e3ae2f2e720d53167d88b56d027cfed3a81a7383a71cd6077d0f26634d9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getVersion\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/foss/kotlin/com/absinthe/libchecker/utils/harmony/SystemVersionDelegate.kt",
      "language": "kotlin",
      "line": 7,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 5,
        "length": 10,
        "offset": 41,
        "surroundingCode": " */\nobject SystemVersionDelegate {\n  fun getVersion(): String? = null\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d460d22080b7e356f326f14257a8feee97aeeae8471a694895aae299a056441d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"EM_SPARC\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 84,
      "offset": 23,
      "length": 8,
      "code": {
        "startLine": 82,
        "length": 8,
        "offset": 73,
        "surroundingCode": "    // e_machine\n    private const val EM_NONE = 0\n    private const val EM_SPARC = 2\n    private const val EM_386 = 3\n    private const val EM_SPARC32PLUS = 18"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3ac1779d9551c0294b21c5baf0fcfdbc798adb366c60df8c8f33307ff7283b4a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ET_DYN\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 75,
        "length": 6,
        "offset": 89,
        "surroundingCode": "    private const val ET_REL = 1\n    private const val ET_EXEC = 2\n    private const val ET_DYN = 3\n    private const val ET_CORE = 4\n    private const val ET_LOPROC = 0xff00"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1d163c6a1dacdc127e2941a791052f6d188e7f38e31fb6d2eb2022d9735d5145"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"EM_386\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 85,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 83,
        "length": 6,
        "offset": 91,
        "surroundingCode": "    private const val EM_NONE = 0\n    private const val EM_SPARC = 2\n    private const val EM_386 = 3\n    private const val EM_SPARC32PLUS = 18\n    private const val EM_SPARCV9 = 43"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "55bc0450fb4f8803393684f59cb7415f4f7b486ace59d8b43350aee0d21fea54"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ET_NONE\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 74,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 72,
        "length": 7,
        "offset": 37,
        "surroundingCode": "\n    // e_type\n    private const val ET_NONE = 0\n    private const val ET_REL = 1\n    private const val ET_EXEC = 2"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0e6ff21cdeb7f5f0e95bdce9af870ff16a9be547920fa23f7b33af385a04e84d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ET_LOPROC\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 23,
      "length": 9,
      "code": {
        "startLine": 77,
        "length": 9,
        "offset": 89,
        "surroundingCode": "    private const val ET_DYN = 3\n    private const val ET_CORE = 4\n    private const val ET_LOPROC = 0xff00\n    private const val ET_HIPROC = 0xffff\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e743d3c0057d782dc09ca0085ad3c179dbc5872ba22378eec3f21f6da9af34d9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ELF64_SWORD\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 67,
      "offset": 23,
      "length": 11,
      "code": {
        "startLine": 65,
        "length": 11,
        "offset": 95,
        "surroundingCode": "    private const val ELF64_HALF = 2\n    private const val ELF64_OFF = 8\n    private const val ELF64_SWORD = 4\n    private const val ELF64_WORD = 4\n    private const val ELF64_XWORD = 8"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f726aa755834ed3a33aeb6ed1d89b1f79f011ea96df6efb9f8b2cb1f28b7981c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"EM_SPARC32PLUS\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 86,
      "offset": 23,
      "length": 14,
      "code": {
        "startLine": 84,
        "length": 14,
        "offset": 90,
        "surroundingCode": "    private const val EM_SPARC = 2\n    private const val EM_386 = 3\n    private const val EM_SPARC32PLUS = 18\n    private const val EM_SPARCV9 = 43\n  }"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5a4af48cfe329bb0e751752c6a9edadb7d18c03dbcb15c4bd822185f86684886"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 11,
      "length": 11,
      "code": {
        "startLine": 20,
        "length": 11,
        "offset": 52,
        "surroundingCode": "  val e_shstrndx = ByteArray(ELF64_HALF)\n\n  private constructor()\n\n  constructor(inputStream: InputStream) {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "300de6ce6ae5289e85996e29865e715a305b0da86678b9fb0e18a9e76703ceb8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ET_EXEC\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 76,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 74,
        "length": 7,
        "offset": 89,
        "surroundingCode": "    private const val ET_NONE = 0\n    private const val ET_REL = 1\n    private const val ET_EXEC = 2\n    private const val ET_DYN = 3\n    private const val ET_CORE = 4"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c9ca6e396679a58044e20c84363869ea1b00422bc980cd710b8d27c90df37368"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ET_REL\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 75,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 73,
        "length": 6,
        "offset": 70,
        "surroundingCode": "    // e_type\n    private const val ET_NONE = 0\n    private const val ET_REL = 1\n    private const val ET_EXEC = 2\n    private const val ET_DYN = 3"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8a99620c6c3c79b88fa69be0eb9d9156da2d9b30a17e7fccea6adedfc76bc5a2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ELF64_SXWORD\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 70,
      "offset": 23,
      "length": 12,
      "code": {
        "startLine": 68,
        "length": 12,
        "offset": 97,
        "surroundingCode": "    private const val ELF64_WORD = 4\n    private const val ELF64_XWORD = 8\n    private const val ELF64_SXWORD = 8\n    private const val UNSIGNED_CHAR = 1\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2be57b8f83993cb458306ee460a85e425e116d0644f233cdd0131280265bdc45"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"EM_NONE\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 83,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 81,
        "length": 7,
        "offset": 40,
        "surroundingCode": "\n    // e_machine\n    private const val EM_NONE = 0\n    private const val EM_SPARC = 2\n    private const val EM_386 = 3"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "9ab84999bc3802bc4a2a65615799ad01895bdd5ac305f4751bb9e0f8b3ec6dd1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ET_HIPROC\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 80,
      "offset": 23,
      "length": 9,
      "code": {
        "startLine": 78,
        "length": 9,
        "offset": 97,
        "surroundingCode": "    private const val ET_CORE = 4\n    private const val ET_LOPROC = 0xff00\n    private const val ET_HIPROC = 0xffff\n\n    // e_machine"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ee9c378a1ca4ad0a05d63fd0a1bf437e3580cc26931b278d6a9b02ea89623439"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ET_CORE\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 78,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 76,
        "length": 7,
        "offset": 89,
        "surroundingCode": "    private const val ET_EXEC = 2\n    private const val ET_DYN = 3\n    private const val ET_CORE = 4\n    private const val ET_LOPROC = 0xff00\n    private const val ET_HIPROC = 0xffff"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "08b95f95a589e1a896996b294b23fd0d05791db8c8bbfce17b5cd756262b054c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ELF64_XWORD\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 69,
      "offset": 23,
      "length": 11,
      "code": {
        "startLine": 67,
        "length": 11,
        "offset": 97,
        "surroundingCode": "    private const val ELF64_SWORD = 4\n    private const val ELF64_WORD = 4\n    private const val ELF64_XWORD = 8\n    private const val ELF64_SXWORD = 8\n    private const val UNSIGNED_CHAR = 1"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "63f07992621a5933230448cce51ba50fa5cf48a0f201df03355bdbf65a1462d0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"EM_SPARCV9\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/elf/ELF64EhdrParser.kt",
      "language": "kotlin",
      "line": 87,
      "offset": 23,
      "length": 10,
      "code": {
        "startLine": 85,
        "length": 10,
        "offset": 97,
        "surroundingCode": "    private const val EM_386 = 3\n    private const val EM_SPARC32PLUS = 18\n    private const val EM_SPARCV9 = 43\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e668ec830c4151b5941eb45cd5967ed932b00a632465620141eba1636e5aa02c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"updateSnapshotDiff\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/LCRepository.kt",
      "language": "kotlin",
      "line": 144,
      "offset": 15,
      "length": 18,
      "code": {
        "startLine": 142,
        "length": 18,
        "offset": 19,
        "surroundingCode": "  }\n\n  suspend fun updateSnapshotDiff(item: SnapshotDiffStoringItem) {\n    if (checkDatabaseStatus().not()) return\n    lcDao.updateSnapshotDiff(item)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "653585d00415716d9176de5a67ac207a20efe6547d65e241dad3d37c209f8ea5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"update\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/LCRepository.kt",
      "language": "kotlin",
      "line": 82,
      "offset": 15,
      "length": 6,
      "code": {
        "startLine": 80,
        "length": 6,
        "offset": 19,
        "surroundingCode": "  }\n\n  suspend fun update(items: List<SnapshotItem>) {\n    if (checkDatabaseStatus().not()) return\n    lcDao.update(items)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5f4b1392e8592756744d1eb29a8dc0afaef0741a88127f3e8f2fc123f8c5c5e1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"update\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/LCRepository.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 15,
      "length": 6,
      "code": {
        "startLine": 75,
        "length": 6,
        "offset": 19,
        "surroundingCode": "  }\n\n  suspend fun update(item: SnapshotItem) {\n    if (checkDatabaseStatus().not()) return\n    lcDao.update(item)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5fc3feb4f0fe85e17e5096bbe38cbc4f0236a7c904c7f49e12b13a0208836ea8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"insert\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/LCRepository.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 15,
      "length": 6,
      "code": {
        "startLine": 50,
        "length": 6,
        "offset": 19,
        "surroundingCode": "  }\n\n  suspend fun insert(item: SnapshotItem) {\n    if (checkDatabaseStatus().not()) return\n    lcDao.insert(item)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3ddc2ece09de5f77f605e5fcbffcbb05f6da956270da1ff9fb84816ada6f672a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"deleteAllSnapshots\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/LCRepository.kt",
      "language": "kotlin",
      "line": 129,
      "offset": 7,
      "length": 18,
      "code": {
        "startLine": 127,
        "length": 18,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun deleteAllSnapshots() {\n    if (checkDatabaseStatus().not()) return\n    lcDao.deleteAllSnapshots()"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a13ce966830056be2ecd3706e4af48986b408050e88ee2c2952852776f33fadd"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"UNKNOWN\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/foss/kotlin/ohos/bundle/AbilityInfo.kt",
      "language": "kotlin",
      "line": 5,
      "offset": 26,
      "length": 7,
      "code": {
        "startLine": 3,
        "length": 7,
        "offset": 73,
        "surroundingCode": "object AbilityInfo {\n  enum class AbilityType {\n    DATA, PAGE, SERVICE, UNKNOWN, WEB\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "59027bdf2e04b7ac1dae3c541a52c3cec21a8b91585222c9ba88f499307aa0a4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/base/BaseAlertDialogBuilder.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 3,
      "length": 11,
      "code": {
        "startLine": 9,
        "length": 11,
        "offset": 111,
        "surroundingCode": "class BaseAlertDialogBuilder : MaterialAlertDialogBuilder {\n  constructor(context: Context) : super(context)\n  constructor(context: Context, overrideThemeResId: Int) : super(context, overrideThemeResId)\n\n  override fun create(): AlertDialog {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b5c8a68ca0e0b8de7ae6e8b5b0510968214f896734bdaf0627bbdffc5c67a6ac"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"reversedCompat\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/CompatExtensions.kt",
      "language": "kotlin",
      "line": 59,
      "offset": 23,
      "length": 14,
      "code": {
        "startLine": 57,
        "length": 14,
        "offset": 25,
        "surroundingCode": "}\n\nfun <T> Comparator<T>.reversedCompat(): Comparator<T> = kotlinReversed()\n\n@OptIn(ExperimentalContracts::class)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ac696c05ee964c841fc5420dab0ad435bb50eab9064521b52ae865730bf84d6c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"test\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/StringExtensions.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 12,
      "length": 4,
      "code": {
        "startLine": 10,
        "length": 4,
        "offset": 14,
        "surroundingCode": "}\n\nfun String.test() {\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0d4b4a3dbf53eac53ab16196ee92d51cfbefc8d61ec5e6f20b03300abfec4de6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"wrapperStub\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/harmony/HarmonyOsUtil.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 11,
      "length": 11,
      "code": {
        "startLine": 14,
        "length": 11,
        "offset": 15,
        "surroundingCode": "  }\n\n  fun <T> wrapperStub(f: () -> T): T? {\n    return try {\n      f()"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "04552c6a9980cfd5ddbccd872f24ab2299b762b5c30a429d37f514de3569d2f2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"customEncryptPassword\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/backup/RoomBackup.kt",
      "language": "kotlin",
      "line": 248,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 246,
        "length": 21,
        "offset": 13,
        "surroundingCode": "   */\n\n  fun customEncryptPassword(encryptPassword: String): RoomBackup {\n    this.encryptPassword = encryptPassword\n    return this"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "fcb51c0029c955589c7c4dcc210e58decfdb484724f9a12a07dc328e8d5935aa"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"customLogTag\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/backup/RoomBackup.kt",
      "language": "kotlin",
      "line": 168,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 166,
        "length": 12,
        "offset": 44,
        "surroundingCode": "   * @param customLogTag String\n   */\n  fun customLogTag(customLogTag: String): RoomBackup {\n    TAG = customLogTag\n    return this"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c1d1b348600af4a5e044d38360fc6c5ca751d2a19c05501b8ac33caeef870f7a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"onCompleteListener\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/backup/RoomBackup.kt",
      "language": "kotlin",
      "line": 144,
      "offset": 7,
      "length": 18,
      "code": {
        "startLine": 142,
        "length": 18,
        "offset": 62,
        "surroundingCode": "   * @param onCompleteListener OnCompleteListener\n   */\n  fun onCompleteListener(onCompleteListener: OnCompleteListener): RoomBackup {\n    this.onCompleteListener = onCompleteListener\n    return this"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5407251b89c4c65e907fa6d1b07274a3e4896ab14d2dc54004002fd048af23e0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"permissionRequestLauncher\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/backup/RoomBackup.kt",
      "language": "kotlin",
      "line": 719,
      "offset": 15,
      "length": 25,
      "code": {
        "startLine": 717,
        "length": 25,
        "offset": 69,
        "surroundingCode": "   * If granted backup or restore process starts\n   */\n  private val permissionRequestLauncher =\n    (context as ComponentActivity).registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { permissions ->\n      permissions.entries.forEach {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8ce5c7dabf21e5dc4c3fa87f94229e422b7f0ddeb17b08005ca4a52d30a05427"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"customRestoreDialogTitle\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/backup/RoomBackup.kt",
      "language": "kotlin",
      "line": 178,
      "offset": 7,
      "length": 24,
      "code": {
        "startLine": 176,
        "length": 24,
        "offset": 56,
        "surroundingCode": "   * @param customRestoreDialogTitle String\n   */\n  fun customRestoreDialogTitle(customRestoreDialogTitle: String): RoomBackup {\n    this.customRestoreDialogTitle = customRestoreDialogTitle\n    return this"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1b9f2ae9688da56c86c912d2bb424550f31cbb7f8719710614ee18e911a48ee9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"restartApp\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/backup/RoomBackup.kt",
      "language": "kotlin",
      "line": 133,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 131,
        "length": 10,
        "offset": 45,
        "surroundingCode": "   * @param restartIntent Intent\n   */\n  fun restartApp(restartIntent: Intent): RoomBackup {\n    this.restartIntent = restartIntent\n    restartApp()"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "36038560968f35deb8d0bddd31047fab1b52a57a11d5743a7ee6fa91e60de8f2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"paddingEndCompat\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ViewExtensions.kt",
      "language": "kotlin",
      "line": 57,
      "offset": 10,
      "length": 16,
      "code": {
        "startLine": 55,
        "length": 16,
        "offset": 12,
        "surroundingCode": "}\n\nvar View.paddingEndCompat: Int\n  set(value) {\n    setPadding(paddingStart, paddingTop, value, paddingBottom)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "adc666b8344428d2531b53fb760bb0b00e792ced9249e75c0aa224c553f72d50"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"addPaddingBottom\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ViewExtensions.kt",
      "language": "kotlin",
      "line": 73,
      "offset": 10,
      "length": 16,
      "code": {
        "startLine": 71,
        "length": 16,
        "offset": 34,
        "surroundingCode": "  get() = paddingBottom\n\nfun View.addPaddingBottom(padding: Int) {\n  addPaddingBottom(padding)\n}"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b1e1cac7a1d9d3d449846459e7bbe3e3cda0e3a1d372d77d50e937579677dc63"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"setSystemPadding\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ViewExtensions.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 15,
      "length": 16,
      "code": {
        "startLine": 75,
        "length": 16,
        "offset": 17,
        "surroundingCode": "}\n\nfun ViewGroup.setSystemPadding() {\n  val isOrientationLandscape = context.isOrientationLandscape\n  fitsSystemWindows = isOrientationLandscape"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e5f6831f02996f37e9a7349630402627ce6bbadd7c239da328953bb148fad4a2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"paddingStartCompat\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ViewExtensions.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 10,
      "length": 18,
      "code": {
        "startLine": 35,
        "length": 18,
        "offset": 102,
        "surroundingCode": "val Number.dp: Int get() = (toInt() * Resources.getSystem().displayMetrics.density).toInt()\n\nvar View.paddingStartCompat: Int\n  set(value) {\n    setPadding(value, paddingTop, paddingEnd, paddingBottom)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b149f63b0b47b6d0e5d04f813716c09ef3514b028df1b95554a22a7ec7a4cadc"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"paddingBottomCompat\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ViewExtensions.kt",
      "language": "kotlin",
      "line": 67,
      "offset": 10,
      "length": 19,
      "code": {
        "startLine": 65,
        "length": 19,
        "offset": 12,
        "surroundingCode": "}\n\nvar View.paddingBottomCompat: Int\n  set(value) {\n    setPadding(paddingStart, paddingTop, paddingEnd, value)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "cb9ed8684caad6bfaf5618fdfe30f17d0813ba14a42a381353a6eba3fab7da13"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"addPaddingStart\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ViewExtensions.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 10,
      "length": 15,
      "code": {
        "startLine": 41,
        "length": 15,
        "offset": 33,
        "surroundingCode": "  get() = paddingStart\n\nfun View.addPaddingStart(padding: Int) {\n  addPaddingStart(padding)\n}"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d8fc917a46192355580d5ffa074c1f02fdafdf051af9567520916836e8239f5d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"addPaddingEnd\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/extensions/ViewExtensions.kt",
      "language": "kotlin",
      "line": 63,
      "offset": 10,
      "length": 13,
      "code": {
        "startLine": 61,
        "length": 13,
        "offset": 31,
        "surroundingCode": "  get() = paddingEnd\n\nfun View.addPaddingEnd(padding: Int) {\n  addPaddingEnd(padding)\n}"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "443fbddfec8fbc324e312b35064d3277431ddb7bb488b1fd5177121a902393bd"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"parseRfc1123DateTime\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/DateUtils.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 26,
        "length": 20,
        "offset": 24,
        "surroundingCode": "   * parsed\n   */\n  fun parseRfc1123DateTime(string: String): Date? {\n    return try {\n      SimpleDateFormat(RFC_1123_DATE_TIME, Locale.US).parse(string)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a09aa6b17c4d6993822f5009de1d4176e0044b16ce7945b11b2018bef2b089e9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"formatRfc1123DateTime\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/DateUtils.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 41,
        "length": 21,
        "offset": 46,
        "surroundingCode": "   * @return the formatted string\n   */\n  fun formatRfc1123DateTime(date: Date, timeZone: TimeZone): String {\n    val dateFormat = SimpleDateFormat(RFC_1123_DATE_TIME, Locale.US)\n    dateFormat.timeZone = timeZone"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "299af8aafb6073d082b3a0883b28edec281a33f779525474ac45fb4a7b65ad55"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"formatIso8601DateTime\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/utils/DateUtils.kt",
      "language": "kotlin",
      "line": 80,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 78,
        "length": 21,
        "offset": 46,
        "surroundingCode": "   * @return the formatted string\n   */\n  fun formatIso8601DateTime(date: Date, timeZone: TimeZone): String {\n    val dateFormat = SimpleDateFormat(ISO_8601_PATTERN_1, Locale.US)\n    dateFormat.timeZone = timeZone"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ac59730ab476e68331ccdd2a8090eb3d07925a63e4f380c9a686bb24e09e1eeb"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"saveFile\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/backup/AESEncryptionHelper.kt",
      "language": "kotlin",
      "line": 70,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 68,
        "length": 8,
        "offset": 40,
        "surroundingCode": "   */\n  @Throws(Exception::class)\n  fun saveFile(fileData: ByteArray, file: File) {\n    val bos = BufferedOutputStream(FileOutputStream(file, false))\n    bos.write(fileData)"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "cbc976fcb491b13eebcf5ea96910a29403381565190a1b9c6c39d4ebad97ca90"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"TAG\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/database/backup/AESEncryptionHelper.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 23,
      "length": 3,
      "code": {
        "startLine": 43,
        "length": 3,
        "offset": 103,
        "surroundingCode": "  companion object {\n    private const val BACKUP_SECRET_KEY = \"backupsecretkey\"\n    private const val TAG = \"debug_AESEncryptionHelper\"\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "80e59d773ae95f42a766271554f09c13b28e051dc73a6f0634d8d2477defcdeb"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"AppListStatus\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "app/src/main/kotlin/com/absinthe/libchecker/annotation/AppListStatus.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 18,
      "length": 13,
      "code": {
        "startLine": 18,
        "length": 13,
        "offset": 149,
        "surroundingCode": "@Target(AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.FIELD, AnnotationTarget.FUNCTION)\n@Retention(AnnotationRetention.SOURCE)\nannotation class AppListStatus\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d4845164449404e01de05fbb3ade54eeadd5410355d0488969bdba996301ade5"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'getRepositoriesMode()' is declared in unstable interface 'org.gradle.api.initialization.resolve.DependencyResolutionManagement' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "settings.gradle.kts",
      "language": "kotlin",
      "line": 17,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 15,
        "length": 16,
        "offset": 36,
        "surroundingCode": "\ndependencyResolutionManagement {\n  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n  repositories {\n    google()"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "990dc49f045ff9ccf92b3f1a841f11e2cebbca219fdf9fb268825a126acf5bc7"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'org.gradle.api.initialization.resolve.RepositoriesMode' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "settings.gradle.kts",
      "language": "kotlin",
      "line": 17,
      "offset": 24,
      "length": 16,
      "code": {
        "startLine": 15,
        "length": 16,
        "offset": 57,
        "surroundingCode": "\ndependencyResolutionManagement {\n  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n  repositories {\n    google()"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "1e49011cfbaab82069668731aea192566f3f6daa6046eb02f3cc59152b0804ed"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'FAIL_ON_PROJECT_REPOS' is declared in unstable enum 'org.gradle.api.initialization.resolve.RepositoriesMode' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "settings.gradle.kts",
      "language": "kotlin",
      "line": 17,
      "offset": 41,
      "length": 21,
      "code": {
        "startLine": 15,
        "length": 21,
        "offset": 74,
        "surroundingCode": "\ndependencyResolutionManagement {\n  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n  repositories {\n    google()"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "1a8d83cd9ad2e54c26544a721b1c335054d1fe0b341348f619906bda02ad2e64"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'repositories(org.gradle.api.Action)' is declared in unstable interface 'org.gradle.api.initialization.resolve.DependencyResolutionManagement' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "settings.gradle.kts",
      "language": "kotlin",
      "line": 18,
      "offset": 3,
      "length": 12,
      "code": {
        "startLine": 16,
        "length": 12,
        "offset": 98,
        "surroundingCode": "dependencyResolutionManagement {\n  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n  repositories {\n    google()\n    mavenCentral()"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "a1153e98f7f752b749f4b1b73427994f30f7819c74438c4929991cf951e776be"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setApplicationId(java.lang.String)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 30,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 28,
        "length": 13,
        "offset": 39,
        "surroundingCode": "setupAppModule {\n  defaultConfig {\n    applicationId = \"com.absinthe.libchecker\"\n    namespace = \"com.absinthe.libchecker\"\n  }"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "54b0d1658f4368d1d6d4731be7023a7457a560843c94a53703bf9c63c95eb772"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'buildFeatures(kotlin.jvm.functions.Function1)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 34,
      "offset": 3,
      "length": 13,
      "code": {
        "startLine": 32,
        "length": 13,
        "offset": 7,
        "surroundingCode": "  }\n\n  buildFeatures {\n    viewBinding = true\n  }"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "9d402727127824f3ca98c1b891356fe853aa1d7e94e1b6757a53bda40c5de7ab"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setViewBinding(java.lang.Boolean)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 35,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 33,
        "length": 11,
        "offset": 23,
        "surroundingCode": "\n  buildFeatures {\n    viewBinding = true\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "55c72255fbb3622a2c2a91d36787e04c4bb1977c5176f00110667fbcf89e7b9a"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'sourceSets(kotlin.jvm.functions.Function1,kotlin.Unit>)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 38,
      "offset": 3,
      "length": 10,
      "code": {
        "startLine": 36,
        "length": 10,
        "offset": 7,
        "surroundingCode": "  }\n\n  sourceSets {\n    named(\"main\") {\n      java {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "e0890db3a576883dc7a747367622c3aac909c5158add32706c16db93078ae76b"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'java(kotlin.jvm.functions.Function1)' is declared in unstable 'com.android.build.api.dsl.AndroidSourceSet' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 40,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 38,
        "length": 4,
        "offset": 41,
        "surroundingCode": "  sourceSets {\n    named(\"main\") {\n      java {\n        srcDirs(\"src/main/kotlin\")\n      }"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "1ddfe870f3be8395d3e8221f20073a8d633fb1a046c3937cc9752beb17b64893"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'srcDirs(java.lang.Object...)' is declared in unstable 'com.android.build.api.dsl.AndroidSourceDirectorySet' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 41,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 39,
        "length": 7,
        "offset": 41,
        "surroundingCode": "    named(\"main\") {\n      java {\n        srcDirs(\"src/main/kotlin\")\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "65e5073816ac0a804de3a7aacf329875dbeb44835385d5430bb590ad1bc3510f"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'java(kotlin.jvm.functions.Function1)' is declared in unstable 'com.android.build.api.dsl.AndroidSourceSet' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 45,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 43,
        "length": 4,
        "offset": 32,
        "surroundingCode": "    }\n    named(\"foss\") {\n      java {\n        srcDirs(\"src/foss/kotlin\")\n      }"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "37bf2f467dd50aea3ab0b1f7d9afdf37aa860b2f8f85b9dfbbf1ec7f6dde1f82"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'srcDirs(java.lang.Object...)' is declared in unstable 'com.android.build.api.dsl.AndroidSourceDirectorySet' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 46,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 44,
        "length": 7,
        "offset": 41,
        "surroundingCode": "    named(\"foss\") {\n      java {\n        srcDirs(\"src/foss/kotlin\")\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "b2c435fc2c7557d53e5ae9c8372a0b4d175f69b4ef1b82a28a3fd98890760dd6"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'java(kotlin.jvm.functions.Function1)' is declared in unstable 'com.android.build.api.dsl.AndroidSourceSet' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 50,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 48,
        "length": 4,
        "offset": 34,
        "surroundingCode": "    }\n    named(\"market\") {\n      java {\n        srcDirs(\"src/market/kotlin\")\n      }"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "5c4b8b3e1e81220c65a0f4410941cf411e59fbf3e84014d95423f6e3d7801e24"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'srcDirs(java.lang.Object...)' is declared in unstable 'com.android.build.api.dsl.AndroidSourceDirectorySet' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 51,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 49,
        "length": 7,
        "offset": 43,
        "surroundingCode": "    named(\"market\") {\n      java {\n        srcDirs(\"src/market/kotlin\")\n      }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "53202a5cbb8a7b9aed917d1c4120a05adcb2b7e2b16f6d977da1ddc684cf67f5"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'getResources()' is declared in unstable 'com.android.build.api.dsl.PackagingOptions' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 56,
      "offset": 20,
      "length": 9,
      "code": {
        "startLine": 54,
        "length": 9,
        "offset": 24,
        "surroundingCode": "  }\n\n  packagingOptions.resources.excludes += setOf(\n    \"META-INF/**\",\n    \"okhttp3/**\","
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "76f04110e00e64bd913ecbdc616c275a3e8b3ef068d9cf86d9bc3e5f74b85c9b"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'getExcludes()' is declared in unstable 'com.android.build.api.dsl.ResourcesPackagingOptions' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 56,
      "offset": 30,
      "length": 8,
      "code": {
        "startLine": 54,
        "length": 8,
        "offset": 34,
        "surroundingCode": "  }\n\n  packagingOptions.resources.excludes += setOf(\n    \"META-INF/**\",\n    \"okhttp3/**\","
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "9b854d7570e87cef227bcef52a9bf0912060dad75c4d773e6419abc75766890d"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'getDisable()' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 67,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 65,
        "length": 7,
        "offset": 14,
        "surroundingCode": "\n  lint {\n    disable += \"AppCompatResource\"\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "24a21dc55f446a847b567db82a6f99d386612a229d913d533afca45f7cd11cec"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setIncludeInApk(boolean)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 70,
      "offset": 20,
      "length": 12,
      "code": {
        "startLine": 68,
        "length": 12,
        "offset": 24,
        "surroundingCode": "  }\n\n  dependenciesInfo.includeInApk = false\n\n  applicationVariants.all {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "186ab38c2db5f0dbde141bcd3a994387933b561590b39cf02b1ea5495814525c"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'getSdkComponents()' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 86,
      "offset": 27,
      "length": 13,
      "code": {
        "startLine": 84,
        "length": 13,
        "offset": 124,
        "surroundingCode": "    val optimizeReleaseRes = task(\"optimize${flavor}ReleaseRes\").doLast {\n      val aapt2 = File(\n        androidComponents.sdkComponents.sdkDirectory.get().asFile,\n        \"build-tools/${project.android.buildToolsVersion}/aapt2\"\n      )"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "edb9e07d490d98ff32f101027b599e187e00117ebf8587d176aca994d3d62ede"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'getSdkDirectory()' is declared in unstable 'com.android.build.api.dsl.SdkComponents' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 86,
      "offset": 41,
      "length": 12,
      "code": {
        "startLine": 84,
        "length": 12,
        "offset": 138,
        "surroundingCode": "    val optimizeReleaseRes = task(\"optimize${flavor}ReleaseRes\").doLast {\n      val aapt2 = File(\n        androidComponents.sdkComponents.sdkDirectory.get().asFile,\n        \"build-tools/${project.android.buildToolsVersion}/aapt2\"\n      )"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "3c8d98fff9a3e4646086ca878df0642e9444ac99d7e1708a94cb1472abe403de"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'getBuildToolsVersion()' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 87,
      "offset": 40,
      "length": 17,
      "code": {
        "startLine": 85,
        "length": 17,
        "offset": 130,
        "surroundingCode": "      val aapt2 = File(\n        androidComponents.sdkComponents.sdkDirectory.get().asFile,\n        \"build-tools/${project.android.buildToolsVersion}/aapt2\"\n      )\n      val zip = Paths.get("
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "ed18e3229e192cbce4ea30608c41d281adbc60b92e94518ce81cdb6f61685307"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'invoke(java.lang.String, org.gradle.api.provider.Provider)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "app/build.gradle.kts",
      "language": "kotlin",
      "line": 175,
      "offset": 25,
      "length": 1,
      "code": {
        "startLine": 173,
        "length": 1,
        "offset": 110,
        "surroundingCode": "  debugImplementation(libs.square.leakCanary)\n  \"marketCompileOnly\"(fileTree(\"ohos\"))\n  \"marketImplementation\"(libs.bundles.appCenter)\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker.app",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "4355197bb0ad6025f5f1209975d998bdc4f65650529c0d819271bf4ef5990b8b"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'notCompatibleWithConfigurationCache(java.lang.String)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "build.gradle.kts",
      "language": "kotlin",
      "line": 18,
      "offset": 5,
      "length": 35,
      "code": {
        "startLine": 16,
        "length": 35,
        "offset": 84,
        "surroundingCode": "    it.name.contains(\"transformClassesWithHiddenApiRefine\")\n  }.configureEach {\n    notCompatibleWithConfigurationCache(\"https://github.com/RikkaApps/HiddenApiRefinePlugin/issues/9\")\n  }\n  tasks.matching {"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "97c995666fb3022a792a1982e0470db4d8c7ff3e9aa90e841d71df73f5a470b4"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'notCompatibleWithConfigurationCache(java.lang.String)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "build.gradle.kts",
      "language": "kotlin",
      "line": 23,
      "offset": 5,
      "length": 35,
      "code": {
        "startLine": 21,
        "length": 35,
        "offset": 81,
        "surroundingCode": "    it.name.contains(\"optimize(.*)ReleaseRes\".toRegex())\n  }.configureEach {\n    notCompatibleWithConfigurationCache(\"optimizeReleaseRes tasks haven't support CC.\")\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "LibChecker",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "f3cacd274d17fa83e92fbd21501b9660f1de78ba6d227b812e421995277d5dc4"
}]}